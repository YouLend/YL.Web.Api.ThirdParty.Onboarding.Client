/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using YL.Web.Api.ThirdParty.Onboarding.Client.Client;
using YL.Web.Api.ThirdParty.Onboarding.Client.Model;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>AccountV2StepModel</returns>
        AccountV2StepModel LeadsLeadIdAccountdetailsGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of AccountV2StepModel</returns>
        ApiResponse<AccountV2StepModel> LeadsLeadIdAccountdetailsGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdAccountdetailsPut (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));

        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdAccountdetailsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));
        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>OnboardingV2View</returns>
        OnboardingV2View LeadsLeadIdDetailsGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of OnboardingV2View</returns>
        ApiResponse<OnboardingV2View> LeadsLeadIdDetailsGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveBankStatementDocumentResultModel</returns>
        SaveBankStatementDocumentResultModel LeadsLeadIdDocumentsBankstatementsPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveBankStatementDocumentResultModel</returns>
        ApiResponse<SaveBankStatementDocumentResultModel> LeadsLeadIdDocumentsBankstatementsPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for getting kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>KycDocumentsV2StepModel</returns>
        KycDocumentsV2StepModel LeadsLeadIdDocumentsGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of KycDocumentsV2StepModel</returns>
        ApiResponse<KycDocumentsV2StepModel> LeadsLeadIdDocumentsGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SavePaymentDataDocumentResultModel</returns>
        SavePaymentDataDocumentResultModel LeadsLeadIdDocumentsPaymentdataPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SavePaymentDataDocumentResultModel</returns>
        ApiResponse<SavePaymentDataDocumentResultModel> LeadsLeadIdDocumentsPaymentdataPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveSignficantPersonKycDocumentResultModel</returns>
        SaveSignficantPersonKycDocumentResultModel LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveSignficantPersonKycDocumentResultModel</returns>
        ApiResponse<SaveSignficantPersonKycDocumentResultModel> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>KycQuestionsStepView</returns>
        KycQuestionsStepView LeadsLeadIdKycquestionsGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of KycQuestionsStepView</returns>
        ApiResponse<KycQuestionsStepView> LeadsLeadIdKycquestionsGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdKycquestionsPut (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdKycquestionsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));
        /// <summary>
        /// An endpoint for getting the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>OfferStepModel</returns>
        OfferStepModel LeadsLeadIdOfferGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of OfferStepModel</returns>
        ApiResponse<OfferStepModel> LeadsLeadIdOfferGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for creating the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdOfferPost (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel));

        /// <summary>
        /// An endpoint for creating the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdOfferPostWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel));
        /// <summary>
        /// An endpoint for getting the loan options for a lead
        /// </summary>
        /// <remarks>
        /// The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>LoanSizingModel</returns>
        LoanSizingModel LeadsLeadIdOptionsGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting the loan options for a lead
        /// </summary>
        /// <remarks>
        /// The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of LoanSizingModel</returns>
        ApiResponse<LoanSizingModel> LeadsLeadIdOptionsGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdOrganisationdetailsPut (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel));

        /// <summary>
        /// An endpoint for adding organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdOrganisationdetailsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel));
        /// <summary>
        /// An endpoint for viewing the organisation details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>OrganisationDetailsV3StepView</returns>
        OrganisationDetailsV3StepView LeadsLeadIdOrganisationsdetailsGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the organisation details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of OrganisationDetailsV3StepView</returns>
        ApiResponse<OrganisationDetailsV3StepView> LeadsLeadIdOrganisationsdetailsGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for viewing the payment data of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>PaymentDataStepView</returns>
        PaymentDataStepView LeadsLeadIdPaymentdataGet (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the payment data of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of PaymentDataStepView</returns>
        ApiResponse<PaymentDataStepView> LeadsLeadIdPaymentdataGetWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdPaymentgatewaysPost (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdPaymentgatewaysPostWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));
        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>SaveSignificantPersonsResultModel</returns>
        SaveSignificantPersonsResultModel LeadsLeadIdSignificantpersonsPut (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));

        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>ApiResponse of SaveSignificantPersonsResultModel</returns>
        ApiResponse<SaveSignificantPersonsResultModel> LeadsLeadIdSignificantpersonsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));
        /// <summary>
        /// An endpoint for updating the state of an onboarding
        /// </summary>
        /// <remarks>
        /// The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdStatePut (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel));

        /// <summary>
        /// An endpoint for updating the state of an onboarding
        /// </summary>
        /// <remarks>
        /// The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdStatePutWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel));
        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>CreateThirdPartyAdvanceOnboardingResultModel</returns>
        CreateThirdPartyAdvanceOnboardingResultModel LeadsPost (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));

        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>ApiResponse of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel> LeadsPostWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of AccountV2StepModel</returns>
        System.Threading.Tasks.Task<AccountV2StepModel> LeadsLeadIdAccountdetailsGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountV2StepModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountV2StepModel>> LeadsLeadIdAccountdetailsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdAccountdetailsPutAsync (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));

        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdAccountdetailsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));
        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of OnboardingV2View</returns>
        System.Threading.Tasks.Task<OnboardingV2View> LeadsLeadIdDetailsGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (OnboardingV2View)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnboardingV2View>> LeadsLeadIdDetailsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveBankStatementDocumentResultModel</returns>
        System.Threading.Tasks.Task<SaveBankStatementDocumentResultModel> LeadsLeadIdDocumentsBankstatementsPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveBankStatementDocumentResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveBankStatementDocumentResultModel>> LeadsLeadIdDocumentsBankstatementsPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for getting kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of KycDocumentsV2StepModel</returns>
        System.Threading.Tasks.Task<KycDocumentsV2StepModel> LeadsLeadIdDocumentsGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (KycDocumentsV2StepModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<KycDocumentsV2StepModel>> LeadsLeadIdDocumentsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SavePaymentDataDocumentResultModel</returns>
        System.Threading.Tasks.Task<SavePaymentDataDocumentResultModel> LeadsLeadIdDocumentsPaymentdataPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SavePaymentDataDocumentResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SavePaymentDataDocumentResultModel>> LeadsLeadIdDocumentsPaymentdataPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveSignficantPersonKycDocumentResultModel</returns>
        System.Threading.Tasks.Task<SaveSignficantPersonKycDocumentResultModel> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsync (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignficantPersonKycDocumentResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveSignficantPersonKycDocumentResultModel>> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsyncWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of KycQuestionsStepView</returns>
        System.Threading.Tasks.Task<KycQuestionsStepView> LeadsLeadIdKycquestionsGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (KycQuestionsStepView)</returns>
        System.Threading.Tasks.Task<ApiResponse<KycQuestionsStepView>> LeadsLeadIdKycquestionsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdKycquestionsPutAsync (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdKycquestionsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));
        /// <summary>
        /// An endpoint for getting the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of OfferStepModel</returns>
        System.Threading.Tasks.Task<OfferStepModel> LeadsLeadIdOfferGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (OfferStepModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OfferStepModel>> LeadsLeadIdOfferGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for creating the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdOfferPostAsync (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel));

        /// <summary>
        /// An endpoint for creating the loan offer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdOfferPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel));
        /// <summary>
        /// An endpoint for getting the loan options for a lead
        /// </summary>
        /// <remarks>
        /// The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of LoanSizingModel</returns>
        System.Threading.Tasks.Task<LoanSizingModel> LeadsLeadIdOptionsGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting the loan options for a lead
        /// </summary>
        /// <remarks>
        /// The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (LoanSizingModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoanSizingModel>> LeadsLeadIdOptionsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdOrganisationdetailsPutAsync (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel));

        /// <summary>
        /// An endpoint for adding organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdOrganisationdetailsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel));
        /// <summary>
        /// An endpoint for viewing the organisation details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of OrganisationDetailsV3StepView</returns>
        System.Threading.Tasks.Task<OrganisationDetailsV3StepView> LeadsLeadIdOrganisationsdetailsGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the organisation details of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (OrganisationDetailsV3StepView)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationDetailsV3StepView>> LeadsLeadIdOrganisationsdetailsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for viewing the payment data of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of PaymentDataStepView</returns>
        System.Threading.Tasks.Task<PaymentDataStepView> LeadsLeadIdPaymentdataGetAsync (Guid leadId, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the payment data of a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentDataStepView)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentDataStepView>> LeadsLeadIdPaymentdataGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string));
        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdPaymentgatewaysPostAsync (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdPaymentgatewaysPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));
        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of SaveSignificantPersonsResultModel</returns>
        System.Threading.Tasks.Task<SaveSignificantPersonsResultModel> LeadsLeadIdSignificantpersonsPutAsync (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));

        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignificantPersonsResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveSignificantPersonsResultModel>> LeadsLeadIdSignificantpersonsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));
        /// <summary>
        /// An endpoint for updating the state of an onboarding
        /// </summary>
        /// <remarks>
        /// The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdStatePutAsync (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel));

        /// <summary>
        /// An endpoint for updating the state of an onboarding
        /// </summary>
        /// <remarks>
        /// The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdStatePutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel));
        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        System.Threading.Tasks.Task<CreateThirdPartyAdvanceOnboardingResultModel> LeadsPostAsync (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));

        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateThirdPartyAdvanceOnboardingResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel>> LeadsPostAsyncWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadsApi : ILeadsApiSync, ILeadsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeadsApi : ILeadsApi
    {
        private YL.Web.Api.ThirdParty.Onboarding.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadsApi(String basePath)
        {
            this.Configuration = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.MergeConfigurations(
                YL.Web.Api.ThirdParty.Onboarding.Client.Client.GlobalConfiguration.Instance,
                new YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LeadsApi(YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.MergeConfigurations(
                YL.Web.Api.ThirdParty.Onboarding.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LeadsApi(YL.Web.Api.ThirdParty.Onboarding.Client.Client.ISynchronousClient client,YL.Web.Api.ThirdParty.Onboarding.Client.Client.IAsynchronousClient asyncClient, YL.Web.Api.ThirdParty.Onboarding.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>AccountV2StepModel</returns>
        public AccountV2StepModel LeadsLeadIdAccountdetailsGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<AccountV2StepModel> localVarResponse = LeadsLeadIdAccountdetailsGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of AccountV2StepModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< AccountV2StepModel > LeadsLeadIdAccountdetailsGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdAccountdetailsGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AccountV2StepModel >("/Leads/{leadId}/accountdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdAccountdetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of AccountV2StepModel</returns>
        public async System.Threading.Tasks.Task<AccountV2StepModel> LeadsLeadIdAccountdetailsGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<AccountV2StepModel> localVarResponse = await LeadsLeadIdAccountdetailsGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountV2StepModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<AccountV2StepModel>> LeadsLeadIdAccountdetailsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdAccountdetailsGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountV2StepModel>("/Leads/{leadId}/accountdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdAccountdetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdAccountdetailsPut (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
             LeadsLeadIdAccountdetailsPutWithHttpInfo(leadId, apiVersion, accountDetailsModel);
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdAccountdetailsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdAccountdetailsPut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = accountDetailsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Leads/{leadId}/accountdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdAccountdetailsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdAccountdetailsPutAsync (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
             await LeadsLeadIdAccountdetailsPutAsyncWithHttpInfo(leadId, apiVersion, accountDetailsModel);

        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdAccountdetailsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdAccountdetailsPut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = accountDetailsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Leads/{leadId}/accountdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdAccountdetailsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>OnboardingV2View</returns>
        public OnboardingV2View LeadsLeadIdDetailsGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OnboardingV2View> localVarResponse = LeadsLeadIdDetailsGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of OnboardingV2View</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< OnboardingV2View > LeadsLeadIdDetailsGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDetailsGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnboardingV2View >("/Leads/{leadId}/details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of OnboardingV2View</returns>
        public async System.Threading.Tasks.Task<OnboardingV2View> LeadsLeadIdDetailsGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OnboardingV2View> localVarResponse = await LeadsLeadIdDetailsGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for viewing the onboarding details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (OnboardingV2View)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OnboardingV2View>> LeadsLeadIdDetailsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDetailsGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnboardingV2View>("/Leads/{leadId}/details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveBankStatementDocumentResultModel</returns>
        public SaveBankStatementDocumentResultModel LeadsLeadIdDocumentsBankstatementsPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveBankStatementDocumentResultModel> localVarResponse = LeadsLeadIdDocumentsBankstatementsPostWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveBankStatementDocumentResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SaveBankStatementDocumentResultModel > LeadsLeadIdDocumentsBankstatementsPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsBankstatementsPost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SaveBankStatementDocumentResultModel >("/Leads/{leadId}/documents/bankstatements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsBankstatementsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveBankStatementDocumentResultModel</returns>
        public async System.Threading.Tasks.Task<SaveBankStatementDocumentResultModel> LeadsLeadIdDocumentsBankstatementsPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveBankStatementDocumentResultModel> localVarResponse = await LeadsLeadIdDocumentsBankstatementsPostAsyncWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveBankStatementDocumentResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveBankStatementDocumentResultModel>> LeadsLeadIdDocumentsBankstatementsPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsBankstatementsPost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SaveBankStatementDocumentResultModel>("/Leads/{leadId}/documents/bankstatements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsBankstatementsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for getting kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>KycDocumentsV2StepModel</returns>
        public KycDocumentsV2StepModel LeadsLeadIdDocumentsGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<KycDocumentsV2StepModel> localVarResponse = LeadsLeadIdDocumentsGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for getting kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of KycDocumentsV2StepModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< KycDocumentsV2StepModel > LeadsLeadIdDocumentsGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< KycDocumentsV2StepModel >("/Leads/{leadId}/documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for getting kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of KycDocumentsV2StepModel</returns>
        public async System.Threading.Tasks.Task<KycDocumentsV2StepModel> LeadsLeadIdDocumentsGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<KycDocumentsV2StepModel> localVarResponse = await LeadsLeadIdDocumentsGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for getting kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (KycDocumentsV2StepModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<KycDocumentsV2StepModel>> LeadsLeadIdDocumentsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<KycDocumentsV2StepModel>("/Leads/{leadId}/documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SavePaymentDataDocumentResultModel</returns>
        public SavePaymentDataDocumentResultModel LeadsLeadIdDocumentsPaymentdataPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SavePaymentDataDocumentResultModel> localVarResponse = LeadsLeadIdDocumentsPaymentdataPostWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SavePaymentDataDocumentResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SavePaymentDataDocumentResultModel > LeadsLeadIdDocumentsPaymentdataPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsPaymentdataPost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SavePaymentDataDocumentResultModel >("/Leads/{leadId}/documents/paymentdata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsPaymentdataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SavePaymentDataDocumentResultModel</returns>
        public async System.Threading.Tasks.Task<SavePaymentDataDocumentResultModel> LeadsLeadIdDocumentsPaymentdataPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SavePaymentDataDocumentResultModel> localVarResponse = await LeadsLeadIdDocumentsPaymentdataPostAsyncWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SavePaymentDataDocumentResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SavePaymentDataDocumentResultModel>> LeadsLeadIdDocumentsPaymentdataPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsPaymentdataPost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SavePaymentDataDocumentResultModel>("/Leads/{leadId}/documents/paymentdata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsPaymentdataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveSignficantPersonKycDocumentResultModel</returns>
        public SaveSignficantPersonKycDocumentResultModel LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignficantPersonKycDocumentResultModel> localVarResponse = LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostWithHttpInfo(leadId, significantPersonId, kycDocumentType, apiVersion, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveSignficantPersonKycDocumentResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SaveSignficantPersonKycDocumentResultModel > LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'significantPersonId' is set
            if (significantPersonId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'significantPersonId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'kycDocumentType' is set
            if (kycDocumentType == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'kycDocumentType' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (significantPersonId != null)
                localVarRequestOptions.PathParameters.Add("significantPersonId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(significantPersonId)); // path parameter
            if (kycDocumentType != null)
                localVarRequestOptions.PathParameters.Add("kycDocumentType", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(kycDocumentType)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SaveSignficantPersonKycDocumentResultModel >("/Leads/{leadId}/documents/significantpersons/{significantPersonId}/{kycDocumentType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveSignficantPersonKycDocumentResultModel</returns>
        public async System.Threading.Tasks.Task<SaveSignficantPersonKycDocumentResultModel> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsync (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignficantPersonKycDocumentResultModel> localVarResponse = await LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsyncWithHttpInfo(leadId, significantPersonId, kycDocumentType, apiVersion, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignficantPersonKycDocumentResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignficantPersonKycDocumentResultModel>> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsyncWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'significantPersonId' is set
            if (significantPersonId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'significantPersonId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'kycDocumentType' is set
            if (kycDocumentType == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'kycDocumentType' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (significantPersonId != null)
                localVarRequestOptions.PathParameters.Add("significantPersonId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(significantPersonId)); // path parameter
            if (kycDocumentType != null)
                localVarRequestOptions.PathParameters.Add("kycDocumentType", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(kycDocumentType)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SaveSignficantPersonKycDocumentResultModel>("/Leads/{leadId}/documents/significantpersons/{significantPersonId}/{kycDocumentType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>KycQuestionsStepView</returns>
        public KycQuestionsStepView LeadsLeadIdKycquestionsGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<KycQuestionsStepView> localVarResponse = LeadsLeadIdKycquestionsGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of KycQuestionsStepView</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< KycQuestionsStepView > LeadsLeadIdKycquestionsGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdKycquestionsGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< KycQuestionsStepView >("/Leads/{leadId}/kycquestions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdKycquestionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of KycQuestionsStepView</returns>
        public async System.Threading.Tasks.Task<KycQuestionsStepView> LeadsLeadIdKycquestionsGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<KycQuestionsStepView> localVarResponse = await LeadsLeadIdKycquestionsGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for viewing the kyc questions of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (KycQuestionsStepView)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<KycQuestionsStepView>> LeadsLeadIdKycquestionsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdKycquestionsGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<KycQuestionsStepView>("/Leads/{leadId}/kycquestions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdKycquestionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdKycquestionsPut (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
             LeadsLeadIdKycquestionsPutWithHttpInfo(leadId, apiVersion, kycQuestionsModel);
        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdKycquestionsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdKycquestionsPut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = kycQuestionsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Leads/{leadId}/kycquestions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdKycquestionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdKycquestionsPutAsync (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
             await LeadsLeadIdKycquestionsPutAsyncWithHttpInfo(leadId, apiVersion, kycQuestionsModel);

        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdKycquestionsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdKycquestionsPut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = kycQuestionsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Leads/{leadId}/kycquestions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdKycquestionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for getting the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>OfferStepModel</returns>
        public OfferStepModel LeadsLeadIdOfferGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OfferStepModel> localVarResponse = LeadsLeadIdOfferGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for getting the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of OfferStepModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< OfferStepModel > LeadsLeadIdOfferGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOfferGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OfferStepModel >("/Leads/{leadId}/offer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOfferGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for getting the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of OfferStepModel</returns>
        public async System.Threading.Tasks.Task<OfferStepModel> LeadsLeadIdOfferGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OfferStepModel> localVarResponse = await LeadsLeadIdOfferGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for getting the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (OfferStepModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OfferStepModel>> LeadsLeadIdOfferGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOfferGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OfferStepModel>("/Leads/{leadId}/offer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOfferGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for creating the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdOfferPost (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel))
        {
             LeadsLeadIdOfferPostWithHttpInfo(leadId, apiVersion, onboardingOfferModel);
        }

        /// <summary>
        /// An endpoint for creating the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdOfferPostWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOfferPost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = onboardingOfferModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Leads/{leadId}/offer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOfferPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for creating the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdOfferPostAsync (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel))
        {
             await LeadsLeadIdOfferPostAsyncWithHttpInfo(leadId, apiVersion, onboardingOfferModel);

        }

        /// <summary>
        /// An endpoint for creating the loan offer 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOfferModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdOfferPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOfferModel onboardingOfferModel = default(OnboardingOfferModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOfferPost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = onboardingOfferModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Leads/{leadId}/offer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOfferPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for getting the loan options for a lead The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>LoanSizingModel</returns>
        public LoanSizingModel LeadsLeadIdOptionsGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<LoanSizingModel> localVarResponse = LeadsLeadIdOptionsGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for getting the loan options for a lead The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of LoanSizingModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< LoanSizingModel > LeadsLeadIdOptionsGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOptionsGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LoanSizingModel >("/Leads/{leadId}/options", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOptionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for getting the loan options for a lead The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of LoanSizingModel</returns>
        public async System.Threading.Tasks.Task<LoanSizingModel> LeadsLeadIdOptionsGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<LoanSizingModel> localVarResponse = await LeadsLeadIdOptionsGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for getting the loan options for a lead The available loan options are accessed through this endpoint.  The loan options must first be generated by Banking Circle staff before it is made available through this endpoint.
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (LoanSizingModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<LoanSizingModel>> LeadsLeadIdOptionsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOptionsGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LoanSizingModel>("/Leads/{leadId}/options", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOptionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding organisation details 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdOrganisationdetailsPut (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel))
        {
             LeadsLeadIdOrganisationdetailsPutWithHttpInfo(leadId, apiVersion, onboardingOrganisationDetailsModel);
        }

        /// <summary>
        /// An endpoint for adding organisation details 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdOrganisationdetailsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOrganisationdetailsPut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = onboardingOrganisationDetailsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Leads/{leadId}/organisationdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOrganisationdetailsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding organisation details 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdOrganisationdetailsPutAsync (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel))
        {
             await LeadsLeadIdOrganisationdetailsPutAsyncWithHttpInfo(leadId, apiVersion, onboardingOrganisationDetailsModel);

        }

        /// <summary>
        /// An endpoint for adding organisation details 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingOrganisationDetailsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdOrganisationdetailsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingOrganisationDetailsModel onboardingOrganisationDetailsModel = default(OnboardingOrganisationDetailsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOrganisationdetailsPut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = onboardingOrganisationDetailsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Leads/{leadId}/organisationdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOrganisationdetailsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the organisation details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>OrganisationDetailsV3StepView</returns>
        public OrganisationDetailsV3StepView LeadsLeadIdOrganisationsdetailsGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OrganisationDetailsV3StepView> localVarResponse = LeadsLeadIdOrganisationsdetailsGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for viewing the organisation details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of OrganisationDetailsV3StepView</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< OrganisationDetailsV3StepView > LeadsLeadIdOrganisationsdetailsGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOrganisationsdetailsGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OrganisationDetailsV3StepView >("/Leads/{leadId}/organisationsdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOrganisationsdetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the organisation details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of OrganisationDetailsV3StepView</returns>
        public async System.Threading.Tasks.Task<OrganisationDetailsV3StepView> LeadsLeadIdOrganisationsdetailsGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OrganisationDetailsV3StepView> localVarResponse = await LeadsLeadIdOrganisationsdetailsGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for viewing the organisation details of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (OrganisationDetailsV3StepView)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<OrganisationDetailsV3StepView>> LeadsLeadIdOrganisationsdetailsGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdOrganisationsdetailsGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationDetailsV3StepView>("/Leads/{leadId}/organisationsdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdOrganisationsdetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the payment data of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>PaymentDataStepView</returns>
        public PaymentDataStepView LeadsLeadIdPaymentdataGet (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<PaymentDataStepView> localVarResponse = LeadsLeadIdPaymentdataGetWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for viewing the payment data of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of PaymentDataStepView</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< PaymentDataStepView > LeadsLeadIdPaymentdataGetWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdPaymentdataGet");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PaymentDataStepView >("/Leads/{leadId}/paymentdata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdPaymentdataGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the payment data of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of PaymentDataStepView</returns>
        public async System.Threading.Tasks.Task<PaymentDataStepView> LeadsLeadIdPaymentdataGetAsync (Guid leadId, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<PaymentDataStepView> localVarResponse = await LeadsLeadIdPaymentdataGetAsyncWithHttpInfo(leadId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for viewing the payment data of a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentDataStepView)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<PaymentDataStepView>> LeadsLeadIdPaymentdataGetAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdPaymentdataGet");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentDataStepView>("/Leads/{leadId}/paymentdata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdPaymentdataGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdPaymentgatewaysPost (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
             LeadsLeadIdPaymentgatewaysPostWithHttpInfo(leadId, apiVersion, paymentGatewayModel);
        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdPaymentgatewaysPostWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdPaymentgatewaysPost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = paymentGatewayModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Leads/{leadId}/paymentgateways", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdPaymentgatewaysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdPaymentgatewaysPostAsync (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
             await LeadsLeadIdPaymentgatewaysPostAsyncWithHttpInfo(leadId, apiVersion, paymentGatewayModel);

        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdPaymentgatewaysPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdPaymentgatewaysPost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = paymentGatewayModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Leads/{leadId}/paymentgateways", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdPaymentgatewaysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>SaveSignificantPersonsResultModel</returns>
        public SaveSignificantPersonsResultModel LeadsLeadIdSignificantpersonsPut (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignificantPersonsResultModel> localVarResponse = LeadsLeadIdSignificantpersonsPutWithHttpInfo(leadId, apiVersion, significantPersonsModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>ApiResponse of SaveSignificantPersonsResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SaveSignificantPersonsResultModel > LeadsLeadIdSignificantpersonsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdSignificantpersonsPut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = significantPersonsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< SaveSignificantPersonsResultModel >("/Leads/{leadId}/significantpersons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdSignificantpersonsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of SaveSignificantPersonsResultModel</returns>
        public async System.Threading.Tasks.Task<SaveSignificantPersonsResultModel> LeadsLeadIdSignificantpersonsPutAsync (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignificantPersonsResultModel> localVarResponse = await LeadsLeadIdSignificantpersonsPutAsyncWithHttpInfo(leadId, apiVersion, significantPersonsModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignificantPersonsResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignificantPersonsResultModel>> LeadsLeadIdSignificantpersonsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdSignificantpersonsPut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = significantPersonsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SaveSignificantPersonsResultModel>("/Leads/{leadId}/significantpersons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdSignificantpersonsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for updating the state of an onboarding The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdStatePut (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel))
        {
             LeadsLeadIdStatePutWithHttpInfo(leadId, apiVersion, onboardingStateModel);
        }

        /// <summary>
        /// An endpoint for updating the state of an onboarding The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdStatePutWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdStatePut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = onboardingStateModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Leads/{leadId}/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdStatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for updating the state of an onboarding The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdStatePutAsync (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel))
        {
             await LeadsLeadIdStatePutAsyncWithHttpInfo(leadId, apiVersion, onboardingStateModel);

        }

        /// <summary>
        /// An endpoint for updating the state of an onboarding The state can only be updated once the relevant documents are submitted, the relevant questions are answered or the relevants documents are signed
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="onboardingStateModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdStatePutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), OnboardingStateModel onboardingStateModel = default(OnboardingStateModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdStatePut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = onboardingStateModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Leads/{leadId}/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdStatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a Youlend Advance Lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>CreateThirdPartyAdvanceOnboardingResultModel</returns>
        public CreateThirdPartyAdvanceOnboardingResultModel LeadsPost (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel> localVarResponse = LeadsPostWithHttpInfo(apiVersion, thirdPartyOnboardingModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Youlend Advance Lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>ApiResponse of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< CreateThirdPartyAdvanceOnboardingResultModel > LeadsPostWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {
            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = thirdPartyOnboardingModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateThirdPartyAdvanceOnboardingResultModel >("/Leads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a Youlend Advance Lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        public async System.Threading.Tasks.Task<CreateThirdPartyAdvanceOnboardingResultModel> LeadsPostAsync (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel> localVarResponse = await LeadsPostAsyncWithHttpInfo(apiVersion, thirdPartyOnboardingModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Youlend Advance Lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateThirdPartyAdvanceOnboardingResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel>> LeadsPostAsyncWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = thirdPartyOnboardingModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateThirdPartyAdvanceOnboardingResultModel>("/Leads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
