/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using YL.Web.Api.ThirdParty.Onboarding.Client.Client;
using YL.Web.Api.ThirdParty.Onboarding.Client.Model;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdAccountdetailsPut (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));

        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdAccountdetailsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));
        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveBankStatementDocumentResultModel</returns>
        SaveBankStatementDocumentResultModel LeadsLeadIdDocumentsBankstatementsPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveBankStatementDocumentResultModel</returns>
        ApiResponse<SaveBankStatementDocumentResultModel> LeadsLeadIdDocumentsBankstatementsPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SavePaymentDataDocumentResultModel</returns>
        SavePaymentDataDocumentResultModel LeadsLeadIdDocumentsPaymentdataPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SavePaymentDataDocumentResultModel</returns>
        ApiResponse<SavePaymentDataDocumentResultModel> LeadsLeadIdDocumentsPaymentdataPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveSignficantPersonKycDocumentResultModel</returns>
        SaveSignficantPersonKycDocumentResultModel LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveSignficantPersonKycDocumentResultModel</returns>
        ApiResponse<SaveSignficantPersonKycDocumentResultModel> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdKycquestionsPut (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdKycquestionsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));
        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns></returns>
        void LeadsLeadIdPaymentgatewaysPost (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadsLeadIdPaymentgatewaysPostWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));
        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>SaveSignificantPersonsResultModel</returns>
        SaveSignificantPersonsResultModel LeadsLeadIdSignificantpersonsPut (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));

        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>ApiResponse of SaveSignificantPersonsResultModel</returns>
        ApiResponse<SaveSignificantPersonsResultModel> LeadsLeadIdSignificantpersonsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));
        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// Can add sample as an example here
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>CreateThirdPartyAdvanceOnboardingResultModel</returns>
        CreateThirdPartyAdvanceOnboardingResultModel LeadsPost (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));

        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// Can add sample as an example here
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>ApiResponse of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel> LeadsPostWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdAccountdetailsPutAsync (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));

        /// <summary>
        /// An endpoint for adding account details to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdAccountdetailsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel));
        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveBankStatementDocumentResultModel</returns>
        System.Threading.Tasks.Task<SaveBankStatementDocumentResultModel> LeadsLeadIdDocumentsBankstatementsPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding bank statements to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveBankStatementDocumentResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveBankStatementDocumentResultModel>> LeadsLeadIdDocumentsBankstatementsPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SavePaymentDataDocumentResultModel</returns>
        System.Threading.Tasks.Task<SavePaymentDataDocumentResultModel> LeadsLeadIdDocumentsPaymentdataPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding payment data documents to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SavePaymentDataDocumentResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SavePaymentDataDocumentResultModel>> LeadsLeadIdDocumentsPaymentdataPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveSignficantPersonKycDocumentResultModel</returns>
        System.Threading.Tasks.Task<SaveSignficantPersonKycDocumentResultModel> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsync (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignficantPersonKycDocumentResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveSignficantPersonKycDocumentResultModel>> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsyncWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdKycquestionsPutAsync (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdKycquestionsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel));
        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadsLeadIdPaymentgatewaysPostAsync (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadsLeadIdPaymentgatewaysPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel));
        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of SaveSignificantPersonsResultModel</returns>
        System.Threading.Tasks.Task<SaveSignificantPersonsResultModel> LeadsLeadIdSignificantpersonsPutAsync (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));

        /// <summary>
        /// An endpoint for updating significant persons for a lead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignificantPersonsResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveSignificantPersonsResultModel>> LeadsLeadIdSignificantpersonsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel));
        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// Can add sample as an example here
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        System.Threading.Tasks.Task<CreateThirdPartyAdvanceOnboardingResultModel> LeadsPostAsync (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));

        /// <summary>
        /// Creates a Youlend Advance Lead
        /// </summary>
        /// <remarks>
        /// Can add sample as an example here
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateThirdPartyAdvanceOnboardingResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel>> LeadsPostAsyncWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadsApi : ILeadsApiSync, ILeadsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeadsApi : ILeadsApi
    {
        private YL.Web.Api.ThirdParty.Onboarding.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadsApi(String basePath)
        {
            this.Configuration = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.MergeConfigurations(
                YL.Web.Api.ThirdParty.Onboarding.Client.Client.GlobalConfiguration.Instance,
                new YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LeadsApi(YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.MergeConfigurations(
                YL.Web.Api.ThirdParty.Onboarding.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LeadsApi(YL.Web.Api.ThirdParty.Onboarding.Client.Client.ISynchronousClient client,YL.Web.Api.ThirdParty.Onboarding.Client.Client.IAsynchronousClient asyncClient, YL.Web.Api.ThirdParty.Onboarding.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = YL.Web.Api.ThirdParty.Onboarding.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdAccountdetailsPut (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
             LeadsLeadIdAccountdetailsPutWithHttpInfo(leadId, apiVersion, accountDetailsModel);
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdAccountdetailsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdAccountdetailsPut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = accountDetailsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Leads/{leadId}/accountdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdAccountdetailsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdAccountdetailsPutAsync (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
             await LeadsLeadIdAccountdetailsPutAsyncWithHttpInfo(leadId, apiVersion, accountDetailsModel);

        }

        /// <summary>
        /// An endpoint for adding account details to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="accountDetailsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdAccountdetailsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), AccountDetailsModel accountDetailsModel = default(AccountDetailsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdAccountdetailsPut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = accountDetailsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Leads/{leadId}/accountdetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdAccountdetailsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveBankStatementDocumentResultModel</returns>
        public SaveBankStatementDocumentResultModel LeadsLeadIdDocumentsBankstatementsPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveBankStatementDocumentResultModel> localVarResponse = LeadsLeadIdDocumentsBankstatementsPostWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveBankStatementDocumentResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SaveBankStatementDocumentResultModel > LeadsLeadIdDocumentsBankstatementsPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsBankstatementsPost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SaveBankStatementDocumentResultModel >("/Leads/{leadId}/documents/bankstatements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsBankstatementsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveBankStatementDocumentResultModel</returns>
        public async System.Threading.Tasks.Task<SaveBankStatementDocumentResultModel> LeadsLeadIdDocumentsBankstatementsPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveBankStatementDocumentResultModel> localVarResponse = await LeadsLeadIdDocumentsBankstatementsPostAsyncWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for adding bank statements to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveBankStatementDocumentResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveBankStatementDocumentResultModel>> LeadsLeadIdDocumentsBankstatementsPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsBankstatementsPost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SaveBankStatementDocumentResultModel>("/Leads/{leadId}/documents/bankstatements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsBankstatementsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SavePaymentDataDocumentResultModel</returns>
        public SavePaymentDataDocumentResultModel LeadsLeadIdDocumentsPaymentdataPost (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SavePaymentDataDocumentResultModel> localVarResponse = LeadsLeadIdDocumentsPaymentdataPostWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SavePaymentDataDocumentResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SavePaymentDataDocumentResultModel > LeadsLeadIdDocumentsPaymentdataPostWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsPaymentdataPost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SavePaymentDataDocumentResultModel >("/Leads/{leadId}/documents/paymentdata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsPaymentdataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SavePaymentDataDocumentResultModel</returns>
        public async System.Threading.Tasks.Task<SavePaymentDataDocumentResultModel> LeadsLeadIdDocumentsPaymentdataPostAsync (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SavePaymentDataDocumentResultModel> localVarResponse = await LeadsLeadIdDocumentsPaymentdataPostAsyncWithHttpInfo(leadId, apiVersion, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for adding payment data documents to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SavePaymentDataDocumentResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SavePaymentDataDocumentResultModel>> LeadsLeadIdDocumentsPaymentdataPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsPaymentdataPost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SavePaymentDataDocumentResultModel>("/Leads/{leadId}/documents/paymentdata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsPaymentdataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>SaveSignficantPersonKycDocumentResultModel</returns>
        public SaveSignficantPersonKycDocumentResultModel LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignficantPersonKycDocumentResultModel> localVarResponse = LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostWithHttpInfo(leadId, significantPersonId, kycDocumentType, apiVersion, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of SaveSignficantPersonKycDocumentResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SaveSignficantPersonKycDocumentResultModel > LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'significantPersonId' is set
            if (significantPersonId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'significantPersonId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'kycDocumentType' is set
            if (kycDocumentType == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'kycDocumentType' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (significantPersonId != null)
                localVarRequestOptions.PathParameters.Add("significantPersonId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(significantPersonId)); // path parameter
            if (kycDocumentType != null)
                localVarRequestOptions.PathParameters.Add("kycDocumentType", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(kycDocumentType)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SaveSignficantPersonKycDocumentResultModel >("/Leads/{leadId}/documents/significantpersons/{significantPersonId}/{kycDocumentType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of SaveSignficantPersonKycDocumentResultModel</returns>
        public async System.Threading.Tasks.Task<SaveSignficantPersonKycDocumentResultModel> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsync (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignficantPersonKycDocumentResultModel> localVarResponse = await LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsyncWithHttpInfo(leadId, significantPersonId, kycDocumentType, apiVersion, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for adding kyc documents for a significant person 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="significantPersonId">The third party significant person id</param>
        /// <param name="kycDocumentType">The kyc document type (passport, proofOfAddress)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignficantPersonKycDocumentResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignficantPersonKycDocumentResultModel>> LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePostAsyncWithHttpInfo (Guid leadId, Guid significantPersonId, string kycDocumentType, string apiVersion = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'significantPersonId' is set
            if (significantPersonId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'significantPersonId' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");

            // verify the required parameter 'kycDocumentType' is set
            if (kycDocumentType == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'kycDocumentType' when calling LeadsApi->LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (significantPersonId != null)
                localVarRequestOptions.PathParameters.Add("significantPersonId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(significantPersonId)); // path parameter
            if (kycDocumentType != null)
                localVarRequestOptions.PathParameters.Add("kycDocumentType", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(kycDocumentType)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SaveSignficantPersonKycDocumentResultModel>("/Leads/{leadId}/documents/significantpersons/{significantPersonId}/{kycDocumentType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdDocumentsSignificantpersonsSignificantPersonIdKycDocumentTypePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdKycquestionsPut (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
             LeadsLeadIdKycquestionsPutWithHttpInfo(leadId, apiVersion, kycQuestionsModel);
        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdKycquestionsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdKycquestionsPut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = kycQuestionsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Leads/{leadId}/kycquestions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdKycquestionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdKycquestionsPutAsync (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
             await LeadsLeadIdKycquestionsPutAsyncWithHttpInfo(leadId, apiVersion, kycQuestionsModel);

        }

        /// <summary>
        /// An endpoint for adding KYC question answers to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="kycQuestionsModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdKycquestionsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), KycQuestionsModel kycQuestionsModel = default(KycQuestionsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdKycquestionsPut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = kycQuestionsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Leads/{leadId}/kycquestions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdKycquestionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns></returns>
        public void LeadsLeadIdPaymentgatewaysPost (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
             LeadsLeadIdPaymentgatewaysPostWithHttpInfo(leadId, apiVersion, paymentGatewayModel);
        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object> LeadsLeadIdPaymentgatewaysPostWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdPaymentgatewaysPost");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = paymentGatewayModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Leads/{leadId}/paymentgateways", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdPaymentgatewaysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadsLeadIdPaymentgatewaysPostAsync (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
             await LeadsLeadIdPaymentgatewaysPostAsyncWithHttpInfo(leadId, apiVersion, paymentGatewayModel);

        }

        /// <summary>
        /// An endpoint for adding a payment gateway to a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="paymentGatewayModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<Object>> LeadsLeadIdPaymentgatewaysPostAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), PaymentGatewayModel paymentGatewayModel = default(PaymentGatewayModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdPaymentgatewaysPost");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = paymentGatewayModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Leads/{leadId}/paymentgateways", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdPaymentgatewaysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>SaveSignificantPersonsResultModel</returns>
        public SaveSignificantPersonsResultModel LeadsLeadIdSignificantpersonsPut (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignificantPersonsResultModel> localVarResponse = LeadsLeadIdSignificantpersonsPutWithHttpInfo(leadId, apiVersion, significantPersonsModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>ApiResponse of SaveSignificantPersonsResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< SaveSignificantPersonsResultModel > LeadsLeadIdSignificantpersonsPutWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdSignificantpersonsPut");

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = significantPersonsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< SaveSignificantPersonsResultModel >("/Leads/{leadId}/significantpersons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdSignificantpersonsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of SaveSignificantPersonsResultModel</returns>
        public async System.Threading.Tasks.Task<SaveSignificantPersonsResultModel> LeadsLeadIdSignificantpersonsPutAsync (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignificantPersonsResultModel> localVarResponse = await LeadsLeadIdSignificantpersonsPutAsyncWithHttpInfo(leadId, apiVersion, significantPersonsModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for updating significant persons for a lead 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leadId">The lead id</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="significantPersonsModel"> (optional)</param>
        /// <returns>Task of ApiResponse (SaveSignificantPersonsResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<SaveSignificantPersonsResultModel>> LeadsLeadIdSignificantpersonsPutAsyncWithHttpInfo (Guid leadId, string apiVersion = default(string), SignificantPersonsModel significantPersonsModel = default(SignificantPersonsModel))
        {
            // verify the required parameter 'leadId' is set
            if (leadId == null)
                throw new YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException(400, "Missing required parameter 'leadId' when calling LeadsApi->LeadsLeadIdSignificantpersonsPut");


            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (leadId != null)
                localVarRequestOptions.PathParameters.Add("leadId", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(leadId)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = significantPersonsModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SaveSignificantPersonsResultModel>("/Leads/{leadId}/significantpersons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsLeadIdSignificantpersonsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a Youlend Advance Lead Can add sample as an example here
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>CreateThirdPartyAdvanceOnboardingResultModel</returns>
        public CreateThirdPartyAdvanceOnboardingResultModel LeadsPost (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel> localVarResponse = LeadsPostWithHttpInfo(apiVersion, thirdPartyOnboardingModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Youlend Advance Lead Can add sample as an example here
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>ApiResponse of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        public YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse< CreateThirdPartyAdvanceOnboardingResultModel > LeadsPostWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {
            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = thirdPartyOnboardingModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CreateThirdPartyAdvanceOnboardingResultModel >("/Leads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a Youlend Advance Lead Can add sample as an example here
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of CreateThirdPartyAdvanceOnboardingResultModel</returns>
        public async System.Threading.Tasks.Task<CreateThirdPartyAdvanceOnboardingResultModel> LeadsPostAsync (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {
             YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel> localVarResponse = await LeadsPostAsyncWithHttpInfo(apiVersion, thirdPartyOnboardingModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Youlend Advance Lead Can add sample as an example here
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="thirdPartyOnboardingModel"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateThirdPartyAdvanceOnboardingResultModel)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.Onboarding.Client.Client.ApiResponse<CreateThirdPartyAdvanceOnboardingResultModel>> LeadsPostAsyncWithHttpInfo (string apiVersion = default(string), ThirdPartyOnboardingModel thirdPartyOnboardingModel = default(ThirdPartyOnboardingModel))
        {

            YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.Onboarding.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.Onboarding.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = thirdPartyOnboardingModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateThirdPartyAdvanceOnboardingResultModel>("/Leads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeadsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
