/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// A model containing data about an onboarding for a lead
    /// </summary>
    [DataContract]
    public partial class OnboardingV2View :  IEquatable<OnboardingV2View>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardingV2View" /> class.
        /// </summary>
        /// <param name="leadSourceLendingPartnerId">leadSourceLendingPartnerId.</param>
        /// <param name="onboardingState">Gets or sets the current state of an onboarding.  One of \&quot;signuprequirementsnotmet\&quot;, \&quot;stage1incomplete\&quot;, \&quot;stage1submitted\&quot;,  \&quot;stage1rejected\&quot;, \&quot;stage2incomplete\&quot;, \&quot;stage2submitted\&quot;, \&quot;stage2rejected\&quot; or \&quot;onboardingcomplete\&quot;..</param>
        /// <param name="onboardingStateReason">Gets or sets the reason for the current state of an onboarding in case of rejection..</param>
        /// <param name="organisationDetailsStepComplete">Gets or sets a value indicating whether the organisation details step is complete.</param>
        /// <param name="paymentDataStepComplete">Gets or sets a value indicating whether the payment data step is complete.</param>
        /// <param name="offerStepComplete">Gets or sets a value indicating whether the offer step is complete.  The offer step requires the documents to be signed..</param>
        /// <param name="kycQuestionsStepComplete">Gets or sets a value indicating whether the KYC questions step is complete.</param>
        /// <param name="kycDocumentsStepComplete">Gets or sets a value indicating whether the KYC documents step is complete.</param>
        /// <param name="accountStepComplete">Gets or sets a value indicating whether the accounts step is complete.</param>
        /// <param name="companyName">Gets or sets the name of the company.</param>
        /// <param name="leadType">Gets or sets the lead type.</param>
        public OnboardingV2View(Guid leadSourceLendingPartnerId = default(Guid), string onboardingState = default(string), string onboardingStateReason = default(string), bool organisationDetailsStepComplete = default(bool), bool paymentDataStepComplete = default(bool), bool offerStepComplete = default(bool), bool kycQuestionsStepComplete = default(bool), bool kycDocumentsStepComplete = default(bool), bool accountStepComplete = default(bool), string companyName = default(string), string leadType = default(string))
        {
            this.LeadSourceLendingPartnerId = leadSourceLendingPartnerId;
            this.OnboardingState = onboardingState;
            this.OnboardingStateReason = onboardingStateReason;
            this.OrganisationDetailsStepComplete = organisationDetailsStepComplete;
            this.PaymentDataStepComplete = paymentDataStepComplete;
            this.OfferStepComplete = offerStepComplete;
            this.KycQuestionsStepComplete = kycQuestionsStepComplete;
            this.KycDocumentsStepComplete = kycDocumentsStepComplete;
            this.AccountStepComplete = accountStepComplete;
            this.CompanyName = companyName;
            this.LeadType = leadType;
        }
        
        /// <summary>
        /// Gets or Sets LeadSourceLendingPartnerId
        /// </summary>
        [DataMember(Name="leadSourceLendingPartnerId", EmitDefaultValue=false)]
        public Guid LeadSourceLendingPartnerId { get; set; }

        /// <summary>
        /// Gets or sets the current state of an onboarding.  One of \&quot;signuprequirementsnotmet\&quot;, \&quot;stage1incomplete\&quot;, \&quot;stage1submitted\&quot;,  \&quot;stage1rejected\&quot;, \&quot;stage2incomplete\&quot;, \&quot;stage2submitted\&quot;, \&quot;stage2rejected\&quot; or \&quot;onboardingcomplete\&quot;.
        /// </summary>
        /// <value>Gets or sets the current state of an onboarding.  One of \&quot;signuprequirementsnotmet\&quot;, \&quot;stage1incomplete\&quot;, \&quot;stage1submitted\&quot;,  \&quot;stage1rejected\&quot;, \&quot;stage2incomplete\&quot;, \&quot;stage2submitted\&quot;, \&quot;stage2rejected\&quot; or \&quot;onboardingcomplete\&quot;.</value>
        [DataMember(Name="onboardingState", EmitDefaultValue=false)]
        public string OnboardingState { get; set; }

        /// <summary>
        /// Gets or sets the reason for the current state of an onboarding in case of rejection.
        /// </summary>
        /// <value>Gets or sets the reason for the current state of an onboarding in case of rejection.</value>
        [DataMember(Name="onboardingStateReason", EmitDefaultValue=false)]
        public string OnboardingStateReason { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the organisation details step is complete
        /// </summary>
        /// <value>Gets or sets a value indicating whether the organisation details step is complete</value>
        [DataMember(Name="organisationDetailsStepComplete", EmitDefaultValue=false)]
        public bool OrganisationDetailsStepComplete { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the payment data step is complete
        /// </summary>
        /// <value>Gets or sets a value indicating whether the payment data step is complete</value>
        [DataMember(Name="paymentDataStepComplete", EmitDefaultValue=false)]
        public bool PaymentDataStepComplete { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the offer step is complete.  The offer step requires the documents to be signed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the offer step is complete.  The offer step requires the documents to be signed.</value>
        [DataMember(Name="offerStepComplete", EmitDefaultValue=false)]
        public bool OfferStepComplete { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the KYC questions step is complete
        /// </summary>
        /// <value>Gets or sets a value indicating whether the KYC questions step is complete</value>
        [DataMember(Name="kycQuestionsStepComplete", EmitDefaultValue=false)]
        public bool KycQuestionsStepComplete { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the KYC documents step is complete
        /// </summary>
        /// <value>Gets or sets a value indicating whether the KYC documents step is complete</value>
        [DataMember(Name="kycDocumentsStepComplete", EmitDefaultValue=false)]
        public bool KycDocumentsStepComplete { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the accounts step is complete
        /// </summary>
        /// <value>Gets or sets a value indicating whether the accounts step is complete</value>
        [DataMember(Name="accountStepComplete", EmitDefaultValue=false)]
        public bool AccountStepComplete { get; set; }

        /// <summary>
        /// Gets or sets the name of the company
        /// </summary>
        /// <value>Gets or sets the name of the company</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or sets the lead type
        /// </summary>
        /// <value>Gets or sets the lead type</value>
        [DataMember(Name="leadType", EmitDefaultValue=false)]
        public string LeadType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnboardingV2View {\n");
            sb.Append("  LeadSourceLendingPartnerId: ").Append(LeadSourceLendingPartnerId).Append("\n");
            sb.Append("  OnboardingState: ").Append(OnboardingState).Append("\n");
            sb.Append("  OnboardingStateReason: ").Append(OnboardingStateReason).Append("\n");
            sb.Append("  OrganisationDetailsStepComplete: ").Append(OrganisationDetailsStepComplete).Append("\n");
            sb.Append("  PaymentDataStepComplete: ").Append(PaymentDataStepComplete).Append("\n");
            sb.Append("  OfferStepComplete: ").Append(OfferStepComplete).Append("\n");
            sb.Append("  KycQuestionsStepComplete: ").Append(KycQuestionsStepComplete).Append("\n");
            sb.Append("  KycDocumentsStepComplete: ").Append(KycDocumentsStepComplete).Append("\n");
            sb.Append("  AccountStepComplete: ").Append(AccountStepComplete).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  LeadType: ").Append(LeadType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnboardingV2View);
        }

        /// <summary>
        /// Returns true if OnboardingV2View instances are equal
        /// </summary>
        /// <param name="input">Instance of OnboardingV2View to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnboardingV2View input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeadSourceLendingPartnerId == input.LeadSourceLendingPartnerId ||
                    (this.LeadSourceLendingPartnerId != null &&
                    this.LeadSourceLendingPartnerId.Equals(input.LeadSourceLendingPartnerId))
                ) && 
                (
                    this.OnboardingState == input.OnboardingState ||
                    (this.OnboardingState != null &&
                    this.OnboardingState.Equals(input.OnboardingState))
                ) && 
                (
                    this.OnboardingStateReason == input.OnboardingStateReason ||
                    (this.OnboardingStateReason != null &&
                    this.OnboardingStateReason.Equals(input.OnboardingStateReason))
                ) && 
                (
                    this.OrganisationDetailsStepComplete == input.OrganisationDetailsStepComplete ||
                    this.OrganisationDetailsStepComplete.Equals(input.OrganisationDetailsStepComplete)
                ) && 
                (
                    this.PaymentDataStepComplete == input.PaymentDataStepComplete ||
                    this.PaymentDataStepComplete.Equals(input.PaymentDataStepComplete)
                ) && 
                (
                    this.OfferStepComplete == input.OfferStepComplete ||
                    this.OfferStepComplete.Equals(input.OfferStepComplete)
                ) && 
                (
                    this.KycQuestionsStepComplete == input.KycQuestionsStepComplete ||
                    this.KycQuestionsStepComplete.Equals(input.KycQuestionsStepComplete)
                ) && 
                (
                    this.KycDocumentsStepComplete == input.KycDocumentsStepComplete ||
                    this.KycDocumentsStepComplete.Equals(input.KycDocumentsStepComplete)
                ) && 
                (
                    this.AccountStepComplete == input.AccountStepComplete ||
                    this.AccountStepComplete.Equals(input.AccountStepComplete)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.LeadType == input.LeadType ||
                    (this.LeadType != null &&
                    this.LeadType.Equals(input.LeadType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeadSourceLendingPartnerId != null)
                    hashCode = hashCode * 59 + this.LeadSourceLendingPartnerId.GetHashCode();
                if (this.OnboardingState != null)
                    hashCode = hashCode * 59 + this.OnboardingState.GetHashCode();
                if (this.OnboardingStateReason != null)
                    hashCode = hashCode * 59 + this.OnboardingStateReason.GetHashCode();
                hashCode = hashCode * 59 + this.OrganisationDetailsStepComplete.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentDataStepComplete.GetHashCode();
                hashCode = hashCode * 59 + this.OfferStepComplete.GetHashCode();
                hashCode = hashCode * 59 + this.KycQuestionsStepComplete.GetHashCode();
                hashCode = hashCode * 59 + this.KycDocumentsStepComplete.GetHashCode();
                hashCode = hashCode * 59 + this.AccountStepComplete.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.LeadType != null)
                    hashCode = hashCode * 59 + this.LeadType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
