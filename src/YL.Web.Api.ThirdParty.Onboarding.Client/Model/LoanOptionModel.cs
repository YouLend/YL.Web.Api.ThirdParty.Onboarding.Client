/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// A model containing data about a loan option
    /// </summary>
    [DataContract]
    public partial class LoanOptionModel :  IEquatable<LoanOptionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanOptionModel" /> class.
        /// </summary>
        /// <param name="fundedAmount">Gets or sets the (rounded up) funding amount for the loan option.</param>
        /// <param name="fee">Gets or sets the (rounded up) fee for the loan option, which is the difference between funded amount and the amount that the borrower repays.</param>
        /// <param name="loanAmount">Gets or sets the (rounded up) loan amount, which is the amount that the borrower repays.</param>
        /// <param name="sweep">Gets or sets the (rounded up) sweep, which is the percentage of the settlement amount that is allocated towards repaying the loan.</param>
        /// <param name="calculatedFundedAmount">Gets or sets the calculated funding amount for the loan option.</param>
        /// <param name="calculatedFee">Gets or sets the calculated fee for the loan option, which is the difference between funded amount and the amount that the borrower repays.</param>
        /// <param name="calculatedLoanAmount">Gets or sets the calculated loan amount, which is the amount that the borrower repays.</param>
        /// <param name="calculatedSweep">Gets or sets the calculated sweep, which is the percentage of the settlement amount that is allocated towards repaying the loan.</param>
        /// <param name="currencyCode">Gets or sets the currency code for the loan option.</param>
        public LoanOptionModel(double fundedAmount = default(double), double fee = default(double), double loanAmount = default(double), double sweep = default(double), double calculatedFundedAmount = default(double), double calculatedFee = default(double), double calculatedLoanAmount = default(double), double calculatedSweep = default(double), string currencyCode = default(string))
        {
            this.FundedAmount = fundedAmount;
            this.Fee = fee;
            this.LoanAmount = loanAmount;
            this.Sweep = sweep;
            this.CalculatedFundedAmount = calculatedFundedAmount;
            this.CalculatedFee = calculatedFee;
            this.CalculatedLoanAmount = calculatedLoanAmount;
            this.CalculatedSweep = calculatedSweep;
            this.CurrencyCode = currencyCode;
        }
        
        /// <summary>
        /// Gets or sets the (rounded up) funding amount for the loan option
        /// </summary>
        /// <value>Gets or sets the (rounded up) funding amount for the loan option</value>
        [DataMember(Name="fundedAmount", EmitDefaultValue=false)]
        public double FundedAmount { get; set; }

        /// <summary>
        /// Gets or sets the (rounded up) fee for the loan option, which is the difference between funded amount and the amount that the borrower repays
        /// </summary>
        /// <value>Gets or sets the (rounded up) fee for the loan option, which is the difference between funded amount and the amount that the borrower repays</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public double Fee { get; set; }

        /// <summary>
        /// Gets or sets the (rounded up) loan amount, which is the amount that the borrower repays
        /// </summary>
        /// <value>Gets or sets the (rounded up) loan amount, which is the amount that the borrower repays</value>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double LoanAmount { get; set; }

        /// <summary>
        /// Gets or sets the (rounded up) sweep, which is the percentage of the settlement amount that is allocated towards repaying the loan
        /// </summary>
        /// <value>Gets or sets the (rounded up) sweep, which is the percentage of the settlement amount that is allocated towards repaying the loan</value>
        [DataMember(Name="sweep", EmitDefaultValue=false)]
        public double Sweep { get; set; }

        /// <summary>
        /// Gets or sets the calculated funding amount for the loan option
        /// </summary>
        /// <value>Gets or sets the calculated funding amount for the loan option</value>
        [DataMember(Name="calculatedFundedAmount", EmitDefaultValue=false)]
        public double CalculatedFundedAmount { get; set; }

        /// <summary>
        /// Gets or sets the calculated fee for the loan option, which is the difference between funded amount and the amount that the borrower repays
        /// </summary>
        /// <value>Gets or sets the calculated fee for the loan option, which is the difference between funded amount and the amount that the borrower repays</value>
        [DataMember(Name="calculatedFee", EmitDefaultValue=false)]
        public double CalculatedFee { get; set; }

        /// <summary>
        /// Gets or sets the calculated loan amount, which is the amount that the borrower repays
        /// </summary>
        /// <value>Gets or sets the calculated loan amount, which is the amount that the borrower repays</value>
        [DataMember(Name="calculatedLoanAmount", EmitDefaultValue=false)]
        public double CalculatedLoanAmount { get; set; }

        /// <summary>
        /// Gets or sets the calculated sweep, which is the percentage of the settlement amount that is allocated towards repaying the loan
        /// </summary>
        /// <value>Gets or sets the calculated sweep, which is the percentage of the settlement amount that is allocated towards repaying the loan</value>
        [DataMember(Name="calculatedSweep", EmitDefaultValue=false)]
        public double CalculatedSweep { get; set; }

        /// <summary>
        /// Gets or sets the currency code for the loan option
        /// </summary>
        /// <value>Gets or sets the currency code for the loan option</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanOptionModel {\n");
            sb.Append("  FundedAmount: ").Append(FundedAmount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  Sweep: ").Append(Sweep).Append("\n");
            sb.Append("  CalculatedFundedAmount: ").Append(CalculatedFundedAmount).Append("\n");
            sb.Append("  CalculatedFee: ").Append(CalculatedFee).Append("\n");
            sb.Append("  CalculatedLoanAmount: ").Append(CalculatedLoanAmount).Append("\n");
            sb.Append("  CalculatedSweep: ").Append(CalculatedSweep).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanOptionModel);
        }

        /// <summary>
        /// Returns true if LoanOptionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanOptionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanOptionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FundedAmount == input.FundedAmount ||
                    this.FundedAmount.Equals(input.FundedAmount)
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    this.LoanAmount.Equals(input.LoanAmount)
                ) && 
                (
                    this.Sweep == input.Sweep ||
                    this.Sweep.Equals(input.Sweep)
                ) && 
                (
                    this.CalculatedFundedAmount == input.CalculatedFundedAmount ||
                    this.CalculatedFundedAmount.Equals(input.CalculatedFundedAmount)
                ) && 
                (
                    this.CalculatedFee == input.CalculatedFee ||
                    this.CalculatedFee.Equals(input.CalculatedFee)
                ) && 
                (
                    this.CalculatedLoanAmount == input.CalculatedLoanAmount ||
                    this.CalculatedLoanAmount.Equals(input.CalculatedLoanAmount)
                ) && 
                (
                    this.CalculatedSweep == input.CalculatedSweep ||
                    this.CalculatedSweep.Equals(input.CalculatedSweep)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.FundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Fee.GetHashCode();
                hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Sweep.GetHashCode();
                hashCode = hashCode * 59 + this.CalculatedFundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.CalculatedFee.GetHashCode();
                hashCode = hashCode * 59 + this.CalculatedLoanAmount.GetHashCode();
                hashCode = hashCode * 59 + this.CalculatedSweep.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
