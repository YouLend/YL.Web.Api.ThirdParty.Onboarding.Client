/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Significant Person Data Model
    /// </summary>
    [DataContract]
    public partial class SignificantPersonModel :  IEquatable<SignificantPersonModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignificantPersonModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignificantPersonModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignificantPersonModel" /> class.
        /// </summary>
        /// <param name="firstName">Gets or sets significant person&#39;s first name (required).</param>
        /// <param name="surname">Gets or sets significant person&#39;s surname (required).</param>
        /// <param name="typeOfPerson">Gets or sets significant person&#39;s type. Can be director or beneficial owner.</param>
        /// <param name="address">address (required).</param>
        /// <param name="dateOfBirth">dateOfBirth (required).</param>
        /// <param name="percentageOwned">Gets or sets the percentage of ownership the significant person has.</param>
        /// <param name="emailAddress">Gets or sets significant person&#39;s email address.</param>
        /// <param name="mobilePhoneNumber">Gets or sets significant person&#39;s mobile phone number.</param>
        /// <param name="nationality">Gets or sets significant person&#39;s nationality.</param>
        /// <param name="niNumber">Gets or sets significant person&#39;s NI number.</param>
        public SignificantPersonModel(string firstName = default(string), string surname = default(string), string typeOfPerson = default(string), AddressModel address = default(AddressModel), DateModel dateOfBirth = default(DateModel), double percentageOwned = default(double), string emailAddress = default(string), string mobilePhoneNumber = default(string), string nationality = default(string), string niNumber = default(string))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for SignificantPersonModel and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }

            // to ensure "surname" is required (not null)
            if (surname == null)
            {
                throw new InvalidDataException("surname is a required property for SignificantPersonModel and cannot be null");
            }
            else
            {
                this.Surname = surname;
            }

            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for SignificantPersonModel and cannot be null");
            }
            else
            {
                this.Address = address;
            }

            // to ensure "dateOfBirth" is required (not null)
            if (dateOfBirth == null)
            {
                throw new InvalidDataException("dateOfBirth is a required property for SignificantPersonModel and cannot be null");
            }
            else
            {
                this.DateOfBirth = dateOfBirth;
            }

            this.TypeOfPerson = typeOfPerson;
            this.PercentageOwned = percentageOwned;
            this.EmailAddress = emailAddress;
            this.MobilePhoneNumber = mobilePhoneNumber;
            this.Nationality = nationality;
            this.NiNumber = niNumber;
        }
        
        /// <summary>
        /// Gets or sets significant person&#39;s first name
        /// </summary>
        /// <value>Gets or sets significant person&#39;s first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets significant person&#39;s surname
        /// </summary>
        /// <value>Gets or sets significant person&#39;s surname</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or sets significant person&#39;s type. Can be director or beneficial owner
        /// </summary>
        /// <value>Gets or sets significant person&#39;s type. Can be director or beneficial owner</value>
        [DataMember(Name="typeOfPerson", EmitDefaultValue=false)]
        public string TypeOfPerson { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public AddressModel Address { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        public DateModel DateOfBirth { get; set; }

        /// <summary>
        /// Gets or sets the percentage of ownership the significant person has
        /// </summary>
        /// <value>Gets or sets the percentage of ownership the significant person has</value>
        [DataMember(Name="percentageOwned", EmitDefaultValue=false)]
        public double PercentageOwned { get; set; }

        /// <summary>
        /// Gets or sets significant person&#39;s email address
        /// </summary>
        /// <value>Gets or sets significant person&#39;s email address</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or sets significant person&#39;s mobile phone number
        /// </summary>
        /// <value>Gets or sets significant person&#39;s mobile phone number</value>
        [DataMember(Name="mobilePhoneNumber", EmitDefaultValue=false)]
        public string MobilePhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets significant person&#39;s nationality
        /// </summary>
        /// <value>Gets or sets significant person&#39;s nationality</value>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Gets or sets significant person&#39;s NI number
        /// </summary>
        /// <value>Gets or sets significant person&#39;s NI number</value>
        [DataMember(Name="niNumber", EmitDefaultValue=false)]
        public string NiNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignificantPersonModel {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  TypeOfPerson: ").Append(TypeOfPerson).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  PercentageOwned: ").Append(PercentageOwned).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  MobilePhoneNumber: ").Append(MobilePhoneNumber).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  NiNumber: ").Append(NiNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignificantPersonModel);
        }

        /// <summary>
        /// Returns true if SignificantPersonModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SignificantPersonModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignificantPersonModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.TypeOfPerson == input.TypeOfPerson ||
                    (this.TypeOfPerson != null &&
                    this.TypeOfPerson.Equals(input.TypeOfPerson))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.PercentageOwned == input.PercentageOwned ||
                    this.PercentageOwned.Equals(input.PercentageOwned)
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.MobilePhoneNumber == input.MobilePhoneNumber ||
                    (this.MobilePhoneNumber != null &&
                    this.MobilePhoneNumber.Equals(input.MobilePhoneNumber))
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.NiNumber == input.NiNumber ||
                    (this.NiNumber != null &&
                    this.NiNumber.Equals(input.NiNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.TypeOfPerson != null)
                    hashCode = hashCode * 59 + this.TypeOfPerson.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                hashCode = hashCode * 59 + this.PercentageOwned.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.MobilePhoneNumber != null)
                    hashCode = hashCode * 59 + this.MobilePhoneNumber.GetHashCode();
                if (this.Nationality != null)
                    hashCode = hashCode * 59 + this.Nationality.GetHashCode();
                if (this.NiNumber != null)
                    hashCode = hashCode * 59 + this.NiNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 255.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if(this.FirstName != null && this.FirstName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 1.", new [] { "FirstName" });
            }

            // Surname (string) maxLength
            if(this.Surname != null && this.Surname.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Surname, length must be less than 255.", new [] { "Surname" });
            }

            // Surname (string) minLength
            if(this.Surname != null && this.Surname.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Surname, length must be greater than 1.", new [] { "Surname" });
            }

            // PercentageOwned (double) maximum
            if(this.PercentageOwned > (double)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentageOwned, must be a value less than or equal to 100.", new [] { "PercentageOwned" });
            }

            // PercentageOwned (double) minimum
            if(this.PercentageOwned < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentageOwned, must be a value greater than or equal to 0.", new [] { "PercentageOwned" });
            }

            // EmailAddress (string) pattern
            Regex regexEmailAddress = new Regex(@"^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-||_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+([a-z]+|\\d|-|\\.{0,1}|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])?([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$", RegexOptions.CultureInvariant);
            if (false == regexEmailAddress.Match(this.EmailAddress).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, must match a pattern of " + regexEmailAddress, new [] { "EmailAddress" });
            }

            yield break;
        }
    }

}
