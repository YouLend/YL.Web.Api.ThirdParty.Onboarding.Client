/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// SignificantPersonV2
    /// </summary>
    [DataContract]
    public partial class SignificantPersonV2 :  IEquatable<SignificantPersonV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignificantPersonV2" /> class.
        /// </summary>
        /// <param name="personId">personId.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="surname">surname.</param>
        /// <param name="typeOfPerson">typeOfPerson.</param>
        /// <param name="address">address.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="percentageOwned">percentageOwned.</param>
        /// <param name="email">email.</param>
        /// <param name="mobileNumber">mobileNumber.</param>
        /// <param name="nationality">nationality.</param>
        /// <param name="niNumber">niNumber.</param>
        public SignificantPersonV2(Guid personId = default(Guid), string firstName = default(string), string surname = default(string), string typeOfPerson = default(string), Address address = default(Address), DateTime? dateOfBirth = default(DateTime?), double percentageOwned = default(double), string email = default(string), string mobileNumber = default(string), string nationality = default(string), string niNumber = default(string))
        {
            this.DateOfBirth = dateOfBirth;
            this.PersonId = personId;
            this.FirstName = firstName;
            this.Surname = surname;
            this.TypeOfPerson = typeOfPerson;
            this.Address = address;
            this.DateOfBirth = dateOfBirth;
            this.PercentageOwned = percentageOwned;
            this.Email = email;
            this.MobileNumber = mobileNumber;
            this.Nationality = nationality;
            this.NiNumber = niNumber;
        }
        
        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public Guid PersonId { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets TypeOfPerson
        /// </summary>
        [DataMember(Name="typeOfPerson", EmitDefaultValue=false)]
        public string TypeOfPerson { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets PercentageOwned
        /// </summary>
        [DataMember(Name="percentageOwned", EmitDefaultValue=false)]
        public double PercentageOwned { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets MobileNumber
        /// </summary>
        [DataMember(Name="mobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Gets or Sets Nationality
        /// </summary>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Gets or Sets NiNumber
        /// </summary>
        [DataMember(Name="niNumber", EmitDefaultValue=false)]
        public string NiNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignificantPersonV2 {\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  TypeOfPerson: ").Append(TypeOfPerson).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  PercentageOwned: ").Append(PercentageOwned).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  NiNumber: ").Append(NiNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignificantPersonV2);
        }

        /// <summary>
        /// Returns true if SignificantPersonV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of SignificantPersonV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignificantPersonV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.TypeOfPerson == input.TypeOfPerson ||
                    (this.TypeOfPerson != null &&
                    this.TypeOfPerson.Equals(input.TypeOfPerson))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.PercentageOwned == input.PercentageOwned ||
                    this.PercentageOwned.Equals(input.PercentageOwned)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.NiNumber == input.NiNumber ||
                    (this.NiNumber != null &&
                    this.NiNumber.Equals(input.NiNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonId != null)
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.TypeOfPerson != null)
                    hashCode = hashCode * 59 + this.TypeOfPerson.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                hashCode = hashCode * 59 + this.PercentageOwned.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.MobileNumber != null)
                    hashCode = hashCode * 59 + this.MobileNumber.GetHashCode();
                if (this.Nationality != null)
                    hashCode = hashCode * 59 + this.Nationality.GetHashCode();
                if (this.NiNumber != null)
                    hashCode = hashCode * 59 + this.NiNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
