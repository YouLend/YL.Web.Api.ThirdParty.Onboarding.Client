/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// The view model for a signatory signing
    /// </summary>
    [DataContract]
    public partial class SignatorySigningViewModel :  IEquatable<SignatorySigningViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatorySigningViewModel" /> class.
        /// </summary>
        /// <param name="name">Gets or sets the name of the signatory.</param>
        /// <param name="email">Gets or sets the email of the signatory.</param>
        /// <param name="recipientStatus">Gets or sets the status of the signatory.</param>
        public SignatorySigningViewModel(string name = default(string), string email = default(string), string recipientStatus = default(string))
        {
            this.Name = name;
            this.Email = email;
            this.RecipientStatus = recipientStatus;
        }
        
        /// <summary>
        /// Gets or sets the name of the signatory
        /// </summary>
        /// <value>Gets or sets the name of the signatory</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the email of the signatory
        /// </summary>
        /// <value>Gets or sets the email of the signatory</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the status of the signatory
        /// </summary>
        /// <value>Gets or sets the status of the signatory</value>
        [DataMember(Name="recipientStatus", EmitDefaultValue=false)]
        public string RecipientStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignatorySigningViewModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  RecipientStatus: ").Append(RecipientStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatorySigningViewModel);
        }

        /// <summary>
        /// Returns true if SignatorySigningViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatorySigningViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatorySigningViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.RecipientStatus == input.RecipientStatus ||
                    (this.RecipientStatus != null &&
                    this.RecipientStatus.Equals(input.RecipientStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.RecipientStatus != null)
                    hashCode = hashCode * 59 + this.RecipientStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
