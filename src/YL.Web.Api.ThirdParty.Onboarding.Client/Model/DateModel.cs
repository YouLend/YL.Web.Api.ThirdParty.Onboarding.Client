/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Date Model
    /// </summary>
    [DataContract]
    public partial class DateModel :  IEquatable<DateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateModel" /> class.
        /// </summary>
        /// <param name="year">Gets or sets Year (required).</param>
        /// <param name="month">Gets or sets Month (required).</param>
        /// <param name="day">Gets or sets Day (required).</param>
        public DateModel(int year = default(int), int month = default(int), int day = default(int))
        {
            // to ensure "year" is required (not null)
            if (year == null)
            {
                throw new InvalidDataException("year is a required property for DateModel and cannot be null");
            }
            else
            {
                this.Year = year;
            }

            // to ensure "month" is required (not null)
            if (month == null)
            {
                throw new InvalidDataException("month is a required property for DateModel and cannot be null");
            }
            else
            {
                this.Month = month;
            }

            // to ensure "day" is required (not null)
            if (day == null)
            {
                throw new InvalidDataException("day is a required property for DateModel and cannot be null");
            }
            else
            {
                this.Day = day;
            }

        }
        
        /// <summary>
        /// Gets or sets Year
        /// </summary>
        /// <value>Gets or sets Year</value>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or sets Month
        /// </summary>
        /// <value>Gets or sets Month</value>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int Month { get; set; }

        /// <summary>
        /// Gets or sets Day
        /// </summary>
        /// <value>Gets or sets Day</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int Day { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateModel {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateModel);
        }

        /// <summary>
        /// Returns true if DateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Month == input.Month ||
                    this.Month.Equals(input.Month)
                ) && 
                (
                    this.Day == input.Day ||
                    this.Day.Equals(input.Day)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                hashCode = hashCode * 59 + this.Month.GetHashCode();
                hashCode = hashCode * 59 + this.Day.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Year (int) maximum
            if(this.Year > (int)2001)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Year, must be a value less than or equal to 2001.", new [] { "Year" });
            }

            // Year (int) minimum
            if(this.Year < (int)1900)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Year, must be a value greater than or equal to 1900.", new [] { "Year" });
            }

            // Month (int) maximum
            if(this.Month > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Month, must be a value less than or equal to 12.", new [] { "Month" });
            }

            // Month (int) minimum
            if(this.Month < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Month, must be a value greater than or equal to 1.", new [] { "Month" });
            }

            // Day (int) maximum
            if(this.Day > (int)31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Day, must be a value less than or equal to 31.", new [] { "Day" });
            }

            // Day (int) minimum
            if(this.Day < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Day, must be a value greater than or equal to 1.", new [] { "Day" });
            }

            yield break;
        }
    }

}
