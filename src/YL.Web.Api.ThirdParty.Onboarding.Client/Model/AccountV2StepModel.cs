/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Model containing data about the account step for a lead
    /// </summary>
    [DataContract]
    public partial class AccountV2StepModel :  IEquatable<AccountV2StepModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountV2StepModel" /> class.
        /// </summary>
        /// <param name="leadId">Gets or sets the lead id for this account.</param>
        /// <param name="sortCode">Gets or sets the sort code for the account.</param>
        /// <param name="accountNumber">Gets or sets the account number.</param>
        /// <param name="swift">Gets or sets the swift code for the account.</param>
        /// <param name="iban">Gets or sets the IBAN for the account.</param>
        /// <param name="bankName">Gets or sets the name of the bank assoicated with the account.</param>
        /// <param name="confirmedCompanyAccount">Gets or sets a value indicating whether the account is confirmed to be the company account.</param>
        public AccountV2StepModel(Guid leadId = default(Guid), string sortCode = default(string), string accountNumber = default(string), string swift = default(string), string iban = default(string), string bankName = default(string), bool confirmedCompanyAccount = default(bool))
        {
            this.LeadId = leadId;
            this.SortCode = sortCode;
            this.AccountNumber = accountNumber;
            this.Swift = swift;
            this.Iban = iban;
            this.BankName = bankName;
            this.ConfirmedCompanyAccount = confirmedCompanyAccount;
        }
        
        /// <summary>
        /// Gets or sets the lead id for this account
        /// </summary>
        /// <value>Gets or sets the lead id for this account</value>
        [DataMember(Name="leadId", EmitDefaultValue=false)]
        public Guid LeadId { get; set; }

        /// <summary>
        /// Gets or sets the sort code for the account
        /// </summary>
        /// <value>Gets or sets the sort code for the account</value>
        [DataMember(Name="sortCode", EmitDefaultValue=false)]
        public string SortCode { get; set; }

        /// <summary>
        /// Gets or sets the account number
        /// </summary>
        /// <value>Gets or sets the account number</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets the swift code for the account
        /// </summary>
        /// <value>Gets or sets the swift code for the account</value>
        [DataMember(Name="swift", EmitDefaultValue=false)]
        public string Swift { get; set; }

        /// <summary>
        /// Gets or sets the IBAN for the account
        /// </summary>
        /// <value>Gets or sets the IBAN for the account</value>
        [DataMember(Name="iban", EmitDefaultValue=false)]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or sets the name of the bank assoicated with the account
        /// </summary>
        /// <value>Gets or sets the name of the bank assoicated with the account</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the account is confirmed to be the company account
        /// </summary>
        /// <value>Gets or sets a value indicating whether the account is confirmed to be the company account</value>
        [DataMember(Name="confirmedCompanyAccount", EmitDefaultValue=false)]
        public bool ConfirmedCompanyAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountV2StepModel {\n");
            sb.Append("  LeadId: ").Append(LeadId).Append("\n");
            sb.Append("  SortCode: ").Append(SortCode).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Swift: ").Append(Swift).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  ConfirmedCompanyAccount: ").Append(ConfirmedCompanyAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountV2StepModel);
        }

        /// <summary>
        /// Returns true if AccountV2StepModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountV2StepModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountV2StepModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeadId == input.LeadId ||
                    (this.LeadId != null &&
                    this.LeadId.Equals(input.LeadId))
                ) && 
                (
                    this.SortCode == input.SortCode ||
                    (this.SortCode != null &&
                    this.SortCode.Equals(input.SortCode))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Swift == input.Swift ||
                    (this.Swift != null &&
                    this.Swift.Equals(input.Swift))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.ConfirmedCompanyAccount == input.ConfirmedCompanyAccount ||
                    this.ConfirmedCompanyAccount.Equals(input.ConfirmedCompanyAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeadId != null)
                    hashCode = hashCode * 59 + this.LeadId.GetHashCode();
                if (this.SortCode != null)
                    hashCode = hashCode * 59 + this.SortCode.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Swift != null)
                    hashCode = hashCode * 59 + this.Swift.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                hashCode = hashCode * 59 + this.ConfirmedCompanyAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
