/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Third party onboarding model for create a Youlend lead
    /// </summary>
    [DataContract]
    public partial class ThirdPartyOnboardingModel :  IEquatable<ThirdPartyOnboardingModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdPartyOnboardingModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThirdPartyOnboardingModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThirdPartyOnboardingModel" /> class.
        /// </summary>
        /// <param name="thirdPartyCustomerId">Gets or sets the third party&#39;s id for a merchant (required).</param>
        /// <param name="thirdPartyLeadId">Gets or sets the third party&#39;s id for this lead (required).</param>
        /// <param name="countryISOCode">Gets or sets the ISO country code for the merchant (required).</param>
        /// <param name="loanCurrencyISOCode">Gets or sets the ISO currency code for the merchant (required).</param>
        /// <param name="monthlyCardRevenue">Gets or sets the monthly card revenue for the merchant.</param>
        /// <param name="numberOfPaymentsPerMonth">Gets or sets the number of payments a merchant has a month.</param>
        /// <param name="sweepPercentage">Gets or sets the percentange of transaction amount the merchant wants to use to pay back the loan.</param>
        /// <param name="monthsTrading">Gets or sets the number of months the merchant has been trading.</param>
        /// <param name="loanAmount">Gets or sets the size of loan the merchant wants.</param>
        /// <param name="keyContactName">Gets or sets the key merchant contact who will be setting up the loan (required).</param>
        /// <param name="companyType">Gets or sets the merchant&#39;s company type e.g. Ltd, Sole Trader etc (required).</param>
        /// <param name="companyName">Gets or sets the merchant&#39;s company name (required).</param>
        /// <param name="companyWebsite">Gets or sets the merchants company website URL.</param>
        /// <param name="companyNumber">Gets or sets the registered company number for the merchant.</param>
        /// <param name="vatNumber">Gets or sets the VAT number for the merchant.</param>
        /// <param name="mid">Gets or sets the MID for the merchant.</param>
        /// <param name="registeredAddress">registeredAddress (required).</param>
        /// <param name="contactPhoneNumber">Gets or sets the merchant&#39;s contact phone number (required).</param>
        /// <param name="contactEmailAddress">Gets or sets the merchant&#39;s key contact email address (required).</param>
        /// <param name="notificationURL">Gets or sets the third parties notification URL to which YouLend will send status updates.</param>
        /// <param name="additionalInfo">Gets or sets a list of key values pairs representing any additional lead data not already covered..</param>
        public ThirdPartyOnboardingModel(string thirdPartyCustomerId = default(string), string thirdPartyLeadId = default(string), string countryISOCode = default(string), string loanCurrencyISOCode = default(string), double monthlyCardRevenue = default(double), int numberOfPaymentsPerMonth = default(int), double sweepPercentage = default(double), int monthsTrading = default(int), double loanAmount = default(double), string keyContactName = default(string), string companyType = default(string), string companyName = default(string), string companyWebsite = default(string), string companyNumber = default(string), string vatNumber = default(string), string mid = default(string), AddressModel registeredAddress = default(AddressModel), string contactPhoneNumber = default(string), string contactEmailAddress = default(string), string notificationURL = default(string), Dictionary<string, string> additionalInfo = default(Dictionary<string, string>))
        {
            // to ensure "thirdPartyCustomerId" is required (not null)
            if (thirdPartyCustomerId == null)
            {
                throw new InvalidDataException("thirdPartyCustomerId is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.ThirdPartyCustomerId = thirdPartyCustomerId;
            }

            // to ensure "thirdPartyLeadId" is required (not null)
            if (thirdPartyLeadId == null)
            {
                throw new InvalidDataException("thirdPartyLeadId is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.ThirdPartyLeadId = thirdPartyLeadId;
            }

            // to ensure "countryISOCode" is required (not null)
            if (countryISOCode == null)
            {
                throw new InvalidDataException("countryISOCode is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.CountryISOCode = countryISOCode;
            }

            // to ensure "loanCurrencyISOCode" is required (not null)
            if (loanCurrencyISOCode == null)
            {
                throw new InvalidDataException("loanCurrencyISOCode is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.LoanCurrencyISOCode = loanCurrencyISOCode;
            }

            // to ensure "keyContactName" is required (not null)
            if (keyContactName == null)
            {
                throw new InvalidDataException("keyContactName is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.KeyContactName = keyContactName;
            }

            // to ensure "companyType" is required (not null)
            if (companyType == null)
            {
                throw new InvalidDataException("companyType is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.CompanyType = companyType;
            }

            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new InvalidDataException("companyName is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.CompanyName = companyName;
            }

            // to ensure "registeredAddress" is required (not null)
            if (registeredAddress == null)
            {
                throw new InvalidDataException("registeredAddress is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.RegisteredAddress = registeredAddress;
            }

            // to ensure "contactPhoneNumber" is required (not null)
            if (contactPhoneNumber == null)
            {
                throw new InvalidDataException("contactPhoneNumber is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.ContactPhoneNumber = contactPhoneNumber;
            }

            // to ensure "contactEmailAddress" is required (not null)
            if (contactEmailAddress == null)
            {
                throw new InvalidDataException("contactEmailAddress is a required property for ThirdPartyOnboardingModel and cannot be null");
            }
            else
            {
                this.ContactEmailAddress = contactEmailAddress;
            }

            this.MonthlyCardRevenue = monthlyCardRevenue;
            this.NumberOfPaymentsPerMonth = numberOfPaymentsPerMonth;
            this.SweepPercentage = sweepPercentage;
            this.MonthsTrading = monthsTrading;
            this.LoanAmount = loanAmount;
            this.CompanyWebsite = companyWebsite;
            this.CompanyNumber = companyNumber;
            this.VatNumber = vatNumber;
            this.Mid = mid;
            this.NotificationURL = notificationURL;
            this.AdditionalInfo = additionalInfo;
        }
        
        /// <summary>
        /// Gets or sets the third party&#39;s id for a merchant
        /// </summary>
        /// <value>Gets or sets the third party&#39;s id for a merchant</value>
        [DataMember(Name="thirdPartyCustomerId", EmitDefaultValue=false)]
        public string ThirdPartyCustomerId { get; set; }

        /// <summary>
        /// Gets or sets the third party&#39;s id for this lead
        /// </summary>
        /// <value>Gets or sets the third party&#39;s id for this lead</value>
        [DataMember(Name="thirdPartyLeadId", EmitDefaultValue=false)]
        public string ThirdPartyLeadId { get; set; }

        /// <summary>
        /// Gets or sets the ISO country code for the merchant
        /// </summary>
        /// <value>Gets or sets the ISO country code for the merchant</value>
        [DataMember(Name="countryISOCode", EmitDefaultValue=false)]
        public string CountryISOCode { get; set; }

        /// <summary>
        /// Gets or sets the ISO currency code for the merchant
        /// </summary>
        /// <value>Gets or sets the ISO currency code for the merchant</value>
        [DataMember(Name="loanCurrencyISOCode", EmitDefaultValue=false)]
        public string LoanCurrencyISOCode { get; set; }

        /// <summary>
        /// Gets or sets the monthly card revenue for the merchant
        /// </summary>
        /// <value>Gets or sets the monthly card revenue for the merchant</value>
        [DataMember(Name="monthlyCardRevenue", EmitDefaultValue=false)]
        public double MonthlyCardRevenue { get; set; }

        /// <summary>
        /// Gets or sets the number of payments a merchant has a month
        /// </summary>
        /// <value>Gets or sets the number of payments a merchant has a month</value>
        [DataMember(Name="numberOfPaymentsPerMonth", EmitDefaultValue=false)]
        public int NumberOfPaymentsPerMonth { get; set; }

        /// <summary>
        /// Gets or sets the percentange of transaction amount the merchant wants to use to pay back the loan
        /// </summary>
        /// <value>Gets or sets the percentange of transaction amount the merchant wants to use to pay back the loan</value>
        [DataMember(Name="sweepPercentage", EmitDefaultValue=false)]
        public double SweepPercentage { get; set; }

        /// <summary>
        /// Gets or sets the number of months the merchant has been trading
        /// </summary>
        /// <value>Gets or sets the number of months the merchant has been trading</value>
        [DataMember(Name="monthsTrading", EmitDefaultValue=false)]
        public int MonthsTrading { get; set; }

        /// <summary>
        /// Gets or sets the size of loan the merchant wants
        /// </summary>
        /// <value>Gets or sets the size of loan the merchant wants</value>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double LoanAmount { get; set; }

        /// <summary>
        /// Gets or sets the key merchant contact who will be setting up the loan
        /// </summary>
        /// <value>Gets or sets the key merchant contact who will be setting up the loan</value>
        [DataMember(Name="keyContactName", EmitDefaultValue=false)]
        public string KeyContactName { get; set; }

        /// <summary>
        /// Gets or sets the merchant&#39;s company type e.g. Ltd, Sole Trader etc
        /// </summary>
        /// <value>Gets or sets the merchant&#39;s company type e.g. Ltd, Sole Trader etc</value>
        [DataMember(Name="companyType", EmitDefaultValue=false)]
        public string CompanyType { get; set; }

        /// <summary>
        /// Gets or sets the merchant&#39;s company name
        /// </summary>
        /// <value>Gets or sets the merchant&#39;s company name</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or sets the merchants company website URL
        /// </summary>
        /// <value>Gets or sets the merchants company website URL</value>
        [DataMember(Name="companyWebsite", EmitDefaultValue=false)]
        public string CompanyWebsite { get; set; }

        /// <summary>
        /// Gets or sets the registered company number for the merchant
        /// </summary>
        /// <value>Gets or sets the registered company number for the merchant</value>
        [DataMember(Name="companyNumber", EmitDefaultValue=false)]
        public string CompanyNumber { get; set; }

        /// <summary>
        /// Gets or sets the VAT number for the merchant
        /// </summary>
        /// <value>Gets or sets the VAT number for the merchant</value>
        [DataMember(Name="vatNumber", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Gets or sets the MID for the merchant
        /// </summary>
        /// <value>Gets or sets the MID for the merchant</value>
        [DataMember(Name="mid", EmitDefaultValue=false)]
        public string Mid { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredAddress
        /// </summary>
        [DataMember(Name="registeredAddress", EmitDefaultValue=false)]
        public AddressModel RegisteredAddress { get; set; }

        /// <summary>
        /// Gets or sets the merchant&#39;s contact phone number
        /// </summary>
        /// <value>Gets or sets the merchant&#39;s contact phone number</value>
        [DataMember(Name="contactPhoneNumber", EmitDefaultValue=false)]
        public string ContactPhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets the merchant&#39;s key contact email address
        /// </summary>
        /// <value>Gets or sets the merchant&#39;s key contact email address</value>
        [DataMember(Name="contactEmailAddress", EmitDefaultValue=false)]
        public string ContactEmailAddress { get; set; }

        /// <summary>
        /// Gets or sets the third parties notification URL to which YouLend will send status updates
        /// </summary>
        /// <value>Gets or sets the third parties notification URL to which YouLend will send status updates</value>
        [DataMember(Name="notificationURL", EmitDefaultValue=false)]
        public string NotificationURL { get; set; }

        /// <summary>
        /// Gets or sets a list of key values pairs representing any additional lead data not already covered.
        /// </summary>
        /// <value>Gets or sets a list of key values pairs representing any additional lead data not already covered.</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public Dictionary<string, string> AdditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThirdPartyOnboardingModel {\n");
            sb.Append("  ThirdPartyCustomerId: ").Append(ThirdPartyCustomerId).Append("\n");
            sb.Append("  ThirdPartyLeadId: ").Append(ThirdPartyLeadId).Append("\n");
            sb.Append("  CountryISOCode: ").Append(CountryISOCode).Append("\n");
            sb.Append("  LoanCurrencyISOCode: ").Append(LoanCurrencyISOCode).Append("\n");
            sb.Append("  MonthlyCardRevenue: ").Append(MonthlyCardRevenue).Append("\n");
            sb.Append("  NumberOfPaymentsPerMonth: ").Append(NumberOfPaymentsPerMonth).Append("\n");
            sb.Append("  SweepPercentage: ").Append(SweepPercentage).Append("\n");
            sb.Append("  MonthsTrading: ").Append(MonthsTrading).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  KeyContactName: ").Append(KeyContactName).Append("\n");
            sb.Append("  CompanyType: ").Append(CompanyType).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyWebsite: ").Append(CompanyWebsite).Append("\n");
            sb.Append("  CompanyNumber: ").Append(CompanyNumber).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  RegisteredAddress: ").Append(RegisteredAddress).Append("\n");
            sb.Append("  ContactPhoneNumber: ").Append(ContactPhoneNumber).Append("\n");
            sb.Append("  ContactEmailAddress: ").Append(ContactEmailAddress).Append("\n");
            sb.Append("  NotificationURL: ").Append(NotificationURL).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThirdPartyOnboardingModel);
        }

        /// <summary>
        /// Returns true if ThirdPartyOnboardingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ThirdPartyOnboardingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThirdPartyOnboardingModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ThirdPartyCustomerId == input.ThirdPartyCustomerId ||
                    (this.ThirdPartyCustomerId != null &&
                    this.ThirdPartyCustomerId.Equals(input.ThirdPartyCustomerId))
                ) && 
                (
                    this.ThirdPartyLeadId == input.ThirdPartyLeadId ||
                    (this.ThirdPartyLeadId != null &&
                    this.ThirdPartyLeadId.Equals(input.ThirdPartyLeadId))
                ) && 
                (
                    this.CountryISOCode == input.CountryISOCode ||
                    (this.CountryISOCode != null &&
                    this.CountryISOCode.Equals(input.CountryISOCode))
                ) && 
                (
                    this.LoanCurrencyISOCode == input.LoanCurrencyISOCode ||
                    (this.LoanCurrencyISOCode != null &&
                    this.LoanCurrencyISOCode.Equals(input.LoanCurrencyISOCode))
                ) && 
                (
                    this.MonthlyCardRevenue == input.MonthlyCardRevenue ||
                    this.MonthlyCardRevenue.Equals(input.MonthlyCardRevenue)
                ) && 
                (
                    this.NumberOfPaymentsPerMonth == input.NumberOfPaymentsPerMonth ||
                    this.NumberOfPaymentsPerMonth.Equals(input.NumberOfPaymentsPerMonth)
                ) && 
                (
                    this.SweepPercentage == input.SweepPercentage ||
                    this.SweepPercentage.Equals(input.SweepPercentage)
                ) && 
                (
                    this.MonthsTrading == input.MonthsTrading ||
                    this.MonthsTrading.Equals(input.MonthsTrading)
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    this.LoanAmount.Equals(input.LoanAmount)
                ) && 
                (
                    this.KeyContactName == input.KeyContactName ||
                    (this.KeyContactName != null &&
                    this.KeyContactName.Equals(input.KeyContactName))
                ) && 
                (
                    this.CompanyType == input.CompanyType ||
                    (this.CompanyType != null &&
                    this.CompanyType.Equals(input.CompanyType))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyWebsite == input.CompanyWebsite ||
                    (this.CompanyWebsite != null &&
                    this.CompanyWebsite.Equals(input.CompanyWebsite))
                ) && 
                (
                    this.CompanyNumber == input.CompanyNumber ||
                    (this.CompanyNumber != null &&
                    this.CompanyNumber.Equals(input.CompanyNumber))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.Mid == input.Mid ||
                    (this.Mid != null &&
                    this.Mid.Equals(input.Mid))
                ) && 
                (
                    this.RegisteredAddress == input.RegisteredAddress ||
                    (this.RegisteredAddress != null &&
                    this.RegisteredAddress.Equals(input.RegisteredAddress))
                ) && 
                (
                    this.ContactPhoneNumber == input.ContactPhoneNumber ||
                    (this.ContactPhoneNumber != null &&
                    this.ContactPhoneNumber.Equals(input.ContactPhoneNumber))
                ) && 
                (
                    this.ContactEmailAddress == input.ContactEmailAddress ||
                    (this.ContactEmailAddress != null &&
                    this.ContactEmailAddress.Equals(input.ContactEmailAddress))
                ) && 
                (
                    this.NotificationURL == input.NotificationURL ||
                    (this.NotificationURL != null &&
                    this.NotificationURL.Equals(input.NotificationURL))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    this.AdditionalInfo != null &&
                    input.AdditionalInfo != null &&
                    this.AdditionalInfo.SequenceEqual(input.AdditionalInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ThirdPartyCustomerId != null)
                    hashCode = hashCode * 59 + this.ThirdPartyCustomerId.GetHashCode();
                if (this.ThirdPartyLeadId != null)
                    hashCode = hashCode * 59 + this.ThirdPartyLeadId.GetHashCode();
                if (this.CountryISOCode != null)
                    hashCode = hashCode * 59 + this.CountryISOCode.GetHashCode();
                if (this.LoanCurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.LoanCurrencyISOCode.GetHashCode();
                hashCode = hashCode * 59 + this.MonthlyCardRevenue.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfPaymentsPerMonth.GetHashCode();
                hashCode = hashCode * 59 + this.SweepPercentage.GetHashCode();
                hashCode = hashCode * 59 + this.MonthsTrading.GetHashCode();
                hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                if (this.KeyContactName != null)
                    hashCode = hashCode * 59 + this.KeyContactName.GetHashCode();
                if (this.CompanyType != null)
                    hashCode = hashCode * 59 + this.CompanyType.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyWebsite != null)
                    hashCode = hashCode * 59 + this.CompanyWebsite.GetHashCode();
                if (this.CompanyNumber != null)
                    hashCode = hashCode * 59 + this.CompanyNumber.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.Mid != null)
                    hashCode = hashCode * 59 + this.Mid.GetHashCode();
                if (this.RegisteredAddress != null)
                    hashCode = hashCode * 59 + this.RegisteredAddress.GetHashCode();
                if (this.ContactPhoneNumber != null)
                    hashCode = hashCode * 59 + this.ContactPhoneNumber.GetHashCode();
                if (this.ContactEmailAddress != null)
                    hashCode = hashCode * 59 + this.ContactEmailAddress.GetHashCode();
                if (this.NotificationURL != null)
                    hashCode = hashCode * 59 + this.NotificationURL.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ThirdPartyCustomerId (string) minLength
            if(this.ThirdPartyCustomerId != null && this.ThirdPartyCustomerId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThirdPartyCustomerId, length must be greater than 1.", new [] { "ThirdPartyCustomerId" });
            }

            // ThirdPartyLeadId (string) minLength
            if(this.ThirdPartyLeadId != null && this.ThirdPartyLeadId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThirdPartyLeadId, length must be greater than 1.", new [] { "ThirdPartyLeadId" });
            }

            // CountryISOCode (string) minLength
            if(this.CountryISOCode != null && this.CountryISOCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryISOCode, length must be greater than 1.", new [] { "CountryISOCode" });
            }

            // LoanCurrencyISOCode (string) minLength
            if(this.LoanCurrencyISOCode != null && this.LoanCurrencyISOCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoanCurrencyISOCode, length must be greater than 1.", new [] { "LoanCurrencyISOCode" });
            }

            // MonthlyCardRevenue (double) minimum
            if(this.MonthlyCardRevenue < (double)2500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MonthlyCardRevenue, must be a value greater than or equal to 2500.", new [] { "MonthlyCardRevenue" });
            }

            // NumberOfPaymentsPerMonth (int) minimum
            if(this.NumberOfPaymentsPerMonth < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfPaymentsPerMonth, must be a value greater than or equal to 0.", new [] { "NumberOfPaymentsPerMonth" });
            }

            // SweepPercentage (double) minimum
            if(this.SweepPercentage < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SweepPercentage, must be a value greater than or equal to 0.", new [] { "SweepPercentage" });
            }

            // MonthsTrading (int) minimum
            if(this.MonthsTrading < (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MonthsTrading, must be a value greater than or equal to 3.", new [] { "MonthsTrading" });
            }

            // LoanAmount (double) minimum
            if(this.LoanAmount < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoanAmount, must be a value greater than or equal to 0.", new [] { "LoanAmount" });
            }

            // KeyContactName (string) maxLength
            if(this.KeyContactName != null && this.KeyContactName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for KeyContactName, length must be less than 255.", new [] { "KeyContactName" });
            }

            // KeyContactName (string) minLength
            if(this.KeyContactName != null && this.KeyContactName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for KeyContactName, length must be greater than 1.", new [] { "KeyContactName" });
            }

            // CompanyType (string) minLength
            if(this.CompanyType != null && this.CompanyType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyType, length must be greater than 1.", new [] { "CompanyType" });
            }

            // CompanyName (string) maxLength
            if(this.CompanyName != null && this.CompanyName.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 200.", new [] { "CompanyName" });
            }

            // CompanyName (string) minLength
            if(this.CompanyName != null && this.CompanyName.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be greater than 2.", new [] { "CompanyName" });
            }

            // CompanyWebsite (string) maxLength
            if(this.CompanyWebsite != null && this.CompanyWebsite.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyWebsite, length must be less than 1000.", new [] { "CompanyWebsite" });
            }

            // CompanyWebsite (string) minLength
            if(this.CompanyWebsite != null && this.CompanyWebsite.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyWebsite, length must be greater than 0.", new [] { "CompanyWebsite" });
            }

            // CompanyNumber (string) maxLength
            if(this.CompanyNumber != null && this.CompanyNumber.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyNumber, length must be less than 10.", new [] { "CompanyNumber" });
            }

            // CompanyNumber (string) minLength
            if(this.CompanyNumber != null && this.CompanyNumber.Length < 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyNumber, length must be greater than 6.", new [] { "CompanyNumber" });
            }

            // VatNumber (string) maxLength
            if(this.VatNumber != null && this.VatNumber.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNumber, length must be less than 14.", new [] { "VatNumber" });
            }

            // VatNumber (string) minLength
            if(this.VatNumber != null && this.VatNumber.Length < 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNumber, length must be greater than 6.", new [] { "VatNumber" });
            }

            // ContactPhoneNumber (string) maxLength
            if(this.ContactPhoneNumber != null && this.ContactPhoneNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactPhoneNumber, length must be less than 20.", new [] { "ContactPhoneNumber" });
            }

            // ContactPhoneNumber (string) minLength
            if(this.ContactPhoneNumber != null && this.ContactPhoneNumber.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactPhoneNumber, length must be greater than 8.", new [] { "ContactPhoneNumber" });
            }

            // ContactEmailAddress (string) maxLength
            if(this.ContactEmailAddress != null && this.ContactEmailAddress.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactEmailAddress, length must be less than 255.", new [] { "ContactEmailAddress" });
            }

            // ContactEmailAddress (string) minLength
            if(this.ContactEmailAddress != null && this.ContactEmailAddress.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactEmailAddress, length must be greater than 1.", new [] { "ContactEmailAddress" });
            }

            // ContactEmailAddress (string) pattern
            Regex regexContactEmailAddress = new Regex(@"^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-||_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+([a-z]+|\\d|-|\\.{0,1}|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])?([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$", RegexOptions.CultureInvariant);
            if (false == regexContactEmailAddress.Match(this.ContactEmailAddress).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactEmailAddress, must match a pattern of " + regexContactEmailAddress, new [] { "ContactEmailAddress" });
            }

            // NotificationURL (string) maxLength
            if(this.NotificationURL != null && this.NotificationURL.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotificationURL, length must be less than 1000.", new [] { "NotificationURL" });
            }

            // NotificationURL (string) minLength
            if(this.NotificationURL != null && this.NotificationURL.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotificationURL, length must be greater than 0.", new [] { "NotificationURL" });
            }

            yield break;
        }
    }

}
