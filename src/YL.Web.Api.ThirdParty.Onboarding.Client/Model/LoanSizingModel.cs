/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Model for data about a loan sizing
    /// </summary>
    [DataContract]
    public partial class LoanSizingModel :  IEquatable<LoanSizingModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanSizingModel" /> class.
        /// </summary>
        /// <param name="loanSizingProcessId">Gets or sets the Guid used to identify the loan sizing process.</param>
        /// <param name="companyNumber">Gets or sets the company number.</param>
        /// <param name="companyName">Gets or sets the company name.</param>
        /// <param name="averageMonthlyRevenue">Gets or sets the average monthly revenue of the company.</param>
        /// <param name="creditRatingBandParameters">creditRatingBandParameters.</param>
        /// <param name="loanOption1">loanOption1.</param>
        /// <param name="loanOption2">loanOption2.</param>
        /// <param name="loanOption3">loanOption3.</param>
        public LoanSizingModel(Guid loanSizingProcessId = default(Guid), string companyNumber = default(string), string companyName = default(string), double averageMonthlyRevenue = default(double), CreditRatingBandParameters creditRatingBandParameters = default(CreditRatingBandParameters), LoanOptionModel loanOption1 = default(LoanOptionModel), LoanOptionModel loanOption2 = default(LoanOptionModel), LoanOptionModel loanOption3 = default(LoanOptionModel))
        {
            this.LoanSizingProcessId = loanSizingProcessId;
            this.CompanyNumber = companyNumber;
            this.CompanyName = companyName;
            this.AverageMonthlyRevenue = averageMonthlyRevenue;
            this.CreditRatingBandParameters = creditRatingBandParameters;
            this.LoanOption1 = loanOption1;
            this.LoanOption2 = loanOption2;
            this.LoanOption3 = loanOption3;
        }
        
        /// <summary>
        /// Gets or sets the Guid used to identify the loan sizing process
        /// </summary>
        /// <value>Gets or sets the Guid used to identify the loan sizing process</value>
        [DataMember(Name="loanSizingProcessId", EmitDefaultValue=false)]
        public Guid LoanSizingProcessId { get; set; }

        /// <summary>
        /// Gets or sets the company number
        /// </summary>
        /// <value>Gets or sets the company number</value>
        [DataMember(Name="companyNumber", EmitDefaultValue=false)]
        public string CompanyNumber { get; set; }

        /// <summary>
        /// Gets or sets the company name
        /// </summary>
        /// <value>Gets or sets the company name</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or sets the average monthly revenue of the company
        /// </summary>
        /// <value>Gets or sets the average monthly revenue of the company</value>
        [DataMember(Name="averageMonthlyRevenue", EmitDefaultValue=false)]
        public double AverageMonthlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets CreditRatingBandParameters
        /// </summary>
        [DataMember(Name="creditRatingBandParameters", EmitDefaultValue=false)]
        public CreditRatingBandParameters CreditRatingBandParameters { get; set; }

        /// <summary>
        /// Gets or Sets LoanOption1
        /// </summary>
        [DataMember(Name="loanOption1", EmitDefaultValue=false)]
        public LoanOptionModel LoanOption1 { get; set; }

        /// <summary>
        /// Gets or Sets LoanOption2
        /// </summary>
        [DataMember(Name="loanOption2", EmitDefaultValue=false)]
        public LoanOptionModel LoanOption2 { get; set; }

        /// <summary>
        /// Gets or Sets LoanOption3
        /// </summary>
        [DataMember(Name="loanOption3", EmitDefaultValue=false)]
        public LoanOptionModel LoanOption3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanSizingModel {\n");
            sb.Append("  LoanSizingProcessId: ").Append(LoanSizingProcessId).Append("\n");
            sb.Append("  CompanyNumber: ").Append(CompanyNumber).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  AverageMonthlyRevenue: ").Append(AverageMonthlyRevenue).Append("\n");
            sb.Append("  CreditRatingBandParameters: ").Append(CreditRatingBandParameters).Append("\n");
            sb.Append("  LoanOption1: ").Append(LoanOption1).Append("\n");
            sb.Append("  LoanOption2: ").Append(LoanOption2).Append("\n");
            sb.Append("  LoanOption3: ").Append(LoanOption3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanSizingModel);
        }

        /// <summary>
        /// Returns true if LoanSizingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanSizingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanSizingModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanSizingProcessId == input.LoanSizingProcessId ||
                    (this.LoanSizingProcessId != null &&
                    this.LoanSizingProcessId.Equals(input.LoanSizingProcessId))
                ) && 
                (
                    this.CompanyNumber == input.CompanyNumber ||
                    (this.CompanyNumber != null &&
                    this.CompanyNumber.Equals(input.CompanyNumber))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.AverageMonthlyRevenue == input.AverageMonthlyRevenue ||
                    this.AverageMonthlyRevenue.Equals(input.AverageMonthlyRevenue)
                ) && 
                (
                    this.CreditRatingBandParameters == input.CreditRatingBandParameters ||
                    (this.CreditRatingBandParameters != null &&
                    this.CreditRatingBandParameters.Equals(input.CreditRatingBandParameters))
                ) && 
                (
                    this.LoanOption1 == input.LoanOption1 ||
                    (this.LoanOption1 != null &&
                    this.LoanOption1.Equals(input.LoanOption1))
                ) && 
                (
                    this.LoanOption2 == input.LoanOption2 ||
                    (this.LoanOption2 != null &&
                    this.LoanOption2.Equals(input.LoanOption2))
                ) && 
                (
                    this.LoanOption3 == input.LoanOption3 ||
                    (this.LoanOption3 != null &&
                    this.LoanOption3.Equals(input.LoanOption3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanSizingProcessId != null)
                    hashCode = hashCode * 59 + this.LoanSizingProcessId.GetHashCode();
                if (this.CompanyNumber != null)
                    hashCode = hashCode * 59 + this.CompanyNumber.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                hashCode = hashCode * 59 + this.AverageMonthlyRevenue.GetHashCode();
                if (this.CreditRatingBandParameters != null)
                    hashCode = hashCode * 59 + this.CreditRatingBandParameters.GetHashCode();
                if (this.LoanOption1 != null)
                    hashCode = hashCode * 59 + this.LoanOption1.GetHashCode();
                if (this.LoanOption2 != null)
                    hashCode = hashCode * 59 + this.LoanOption2.GetHashCode();
                if (this.LoanOption3 != null)
                    hashCode = hashCode * 59 + this.LoanOption3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
