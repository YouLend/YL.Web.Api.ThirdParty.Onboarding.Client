/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Model for documents associated with a significant person
    /// </summary>
    [DataContract]
    public partial class SignificantPersonDocumentsModel :  IEquatable<SignificantPersonDocumentsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignificantPersonDocumentsModel" /> class.
        /// </summary>
        /// <param name="personId">Gets or sets the significant person id.</param>
        /// <param name="name">Gets or sets the name of the significant person.</param>
        /// <param name="documents">Gets or sets the dictionary mapping document name to YL.Web.Api.ThirdParty.Onboarding.Models.KycDocumentModel.</param>
        public SignificantPersonDocumentsModel(Guid personId = default(Guid), string name = default(string), Dictionary<string, KycDocumentModel> documents = default(Dictionary<string, KycDocumentModel>))
        {
            this.PersonId = personId;
            this.Name = name;
            this.Documents = documents;
        }
        
        /// <summary>
        /// Gets or sets the significant person id
        /// </summary>
        /// <value>Gets or sets the significant person id</value>
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public Guid PersonId { get; set; }

        /// <summary>
        /// Gets or sets the name of the significant person
        /// </summary>
        /// <value>Gets or sets the name of the significant person</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the dictionary mapping document name to YL.Web.Api.ThirdParty.Onboarding.Models.KycDocumentModel
        /// </summary>
        /// <value>Gets or sets the dictionary mapping document name to YL.Web.Api.ThirdParty.Onboarding.Models.KycDocumentModel</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public Dictionary<string, KycDocumentModel> Documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignificantPersonDocumentsModel {\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignificantPersonDocumentsModel);
        }

        /// <summary>
        /// Returns true if SignificantPersonDocumentsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SignificantPersonDocumentsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignificantPersonDocumentsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonId != null)
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
