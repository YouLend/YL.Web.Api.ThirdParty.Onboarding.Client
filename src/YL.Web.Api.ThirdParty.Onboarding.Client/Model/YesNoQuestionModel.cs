/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Yes No Question Model
    /// </summary>
    [DataContract]
    public partial class YesNoQuestionModel :  IEquatable<YesNoQuestionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="YesNoQuestionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected YesNoQuestionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="YesNoQuestionModel" /> class.
        /// </summary>
        /// <param name="answer">Gets or sets a value indicating whether the answer to the question is yes or no (required).</param>
        /// <param name="additionalInformation">Gets or sets additonal information in the answer to the yes no question.</param>
        public YesNoQuestionModel(bool answer = default(bool), string additionalInformation = default(string))
        {
            // to ensure "answer" is required (not null)
            if (answer == null)
            {
                throw new InvalidDataException("answer is a required property for YesNoQuestionModel and cannot be null");
            }
            else
            {
                this.Answer = answer;
            }

            this.AdditionalInformation = additionalInformation;
        }
        
        /// <summary>
        /// Gets or sets a value indicating whether the answer to the question is yes or no
        /// </summary>
        /// <value>Gets or sets a value indicating whether the answer to the question is yes or no</value>
        [DataMember(Name="answer", EmitDefaultValue=false)]
        public bool Answer { get; set; }

        /// <summary>
        /// Gets or sets additonal information in the answer to the yes no question
        /// </summary>
        /// <value>Gets or sets additonal information in the answer to the yes no question</value>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class YesNoQuestionModel {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as YesNoQuestionModel);
        }

        /// <summary>
        /// Returns true if YesNoQuestionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of YesNoQuestionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(YesNoQuestionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answer == input.Answer ||
                    this.Answer.Equals(input.Answer)
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Answer.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
