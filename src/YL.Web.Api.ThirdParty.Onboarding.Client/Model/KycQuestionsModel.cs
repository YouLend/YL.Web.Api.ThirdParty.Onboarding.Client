/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// KYC Questions Model for answers to the following questions:  * everTerminated - Has the company ever been terminated or suspended by a payment service provider?  * anyPoliticallyExposedPeople - Are there any Politically Exposed Persons in the management or ownership?  * businessArea - Please indicate the percentage of appropriate business activity the company is involved in (e.g., retail services 100%):  * countriesOperateIn - Please list all countries the business sells their products/services in:  * anyLawEnforcedSanctions - Has the company or parent company been the subject of any money laundering or terrorist financing-related proceedings, investigations, sanctions, punitive actions indictment, had fines, conviction or civil enforcement action imposed on the company or parent company by a regulator or law enforcement body during the last five years?  * anyTerrorismFinancing - Has the company, to your knowledge, been the subject to any investigation, indictment, penalty, fine, conviction or civil enforcement action related to terrorism financing in the past five years?  * anyCriminals - Have the owners/board of directors/CEO ever been convicted of any crime?
    /// </summary>
    [DataContract]
    public partial class KycQuestionsModel :  IEquatable<KycQuestionsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KycQuestionsModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KycQuestionsModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KycQuestionsModel" /> class.
        /// </summary>
        /// <param name="everTerminated">everTerminated (required).</param>
        /// <param name="anyPoliticallyExposedPeople">anyPoliticallyExposedPeople (required).</param>
        /// <param name="businessArea">businessArea (required).</param>
        /// <param name="countriesOperateIn">countriesOperateIn (required).</param>
        /// <param name="anyLawEnforcedSanctions">anyLawEnforcedSanctions (required).</param>
        /// <param name="anyTerrorismFinancing">anyTerrorismFinancing (required).</param>
        /// <param name="anyCriminals">anyCriminals (required).</param>
        public KycQuestionsModel(YesNoQuestionModel everTerminated = default(YesNoQuestionModel), YesNoQuestionModel anyPoliticallyExposedPeople = default(YesNoQuestionModel), FreeTextQuestionModel businessArea = default(FreeTextQuestionModel), FreeTextQuestionModel countriesOperateIn = default(FreeTextQuestionModel), YesNoQuestionModel anyLawEnforcedSanctions = default(YesNoQuestionModel), YesNoQuestionModel anyTerrorismFinancing = default(YesNoQuestionModel), YesNoQuestionModel anyCriminals = default(YesNoQuestionModel))
        {
            // to ensure "everTerminated" is required (not null)
            if (everTerminated == null)
            {
                throw new InvalidDataException("everTerminated is a required property for KycQuestionsModel and cannot be null");
            }
            else
            {
                this.EverTerminated = everTerminated;
            }

            // to ensure "anyPoliticallyExposedPeople" is required (not null)
            if (anyPoliticallyExposedPeople == null)
            {
                throw new InvalidDataException("anyPoliticallyExposedPeople is a required property for KycQuestionsModel and cannot be null");
            }
            else
            {
                this.AnyPoliticallyExposedPeople = anyPoliticallyExposedPeople;
            }

            // to ensure "businessArea" is required (not null)
            if (businessArea == null)
            {
                throw new InvalidDataException("businessArea is a required property for KycQuestionsModel and cannot be null");
            }
            else
            {
                this.BusinessArea = businessArea;
            }

            // to ensure "countriesOperateIn" is required (not null)
            if (countriesOperateIn == null)
            {
                throw new InvalidDataException("countriesOperateIn is a required property for KycQuestionsModel and cannot be null");
            }
            else
            {
                this.CountriesOperateIn = countriesOperateIn;
            }

            // to ensure "anyLawEnforcedSanctions" is required (not null)
            if (anyLawEnforcedSanctions == null)
            {
                throw new InvalidDataException("anyLawEnforcedSanctions is a required property for KycQuestionsModel and cannot be null");
            }
            else
            {
                this.AnyLawEnforcedSanctions = anyLawEnforcedSanctions;
            }

            // to ensure "anyTerrorismFinancing" is required (not null)
            if (anyTerrorismFinancing == null)
            {
                throw new InvalidDataException("anyTerrorismFinancing is a required property for KycQuestionsModel and cannot be null");
            }
            else
            {
                this.AnyTerrorismFinancing = anyTerrorismFinancing;
            }

            // to ensure "anyCriminals" is required (not null)
            if (anyCriminals == null)
            {
                throw new InvalidDataException("anyCriminals is a required property for KycQuestionsModel and cannot be null");
            }
            else
            {
                this.AnyCriminals = anyCriminals;
            }

        }
        
        /// <summary>
        /// Gets or Sets EverTerminated
        /// </summary>
        [DataMember(Name="everTerminated", EmitDefaultValue=false)]
        public YesNoQuestionModel EverTerminated { get; set; }

        /// <summary>
        /// Gets or Sets AnyPoliticallyExposedPeople
        /// </summary>
        [DataMember(Name="anyPoliticallyExposedPeople", EmitDefaultValue=false)]
        public YesNoQuestionModel AnyPoliticallyExposedPeople { get; set; }

        /// <summary>
        /// Gets or Sets BusinessArea
        /// </summary>
        [DataMember(Name="businessArea", EmitDefaultValue=false)]
        public FreeTextQuestionModel BusinessArea { get; set; }

        /// <summary>
        /// Gets or Sets CountriesOperateIn
        /// </summary>
        [DataMember(Name="countriesOperateIn", EmitDefaultValue=false)]
        public FreeTextQuestionModel CountriesOperateIn { get; set; }

        /// <summary>
        /// Gets or Sets AnyLawEnforcedSanctions
        /// </summary>
        [DataMember(Name="anyLawEnforcedSanctions", EmitDefaultValue=false)]
        public YesNoQuestionModel AnyLawEnforcedSanctions { get; set; }

        /// <summary>
        /// Gets or Sets AnyTerrorismFinancing
        /// </summary>
        [DataMember(Name="anyTerrorismFinancing", EmitDefaultValue=false)]
        public YesNoQuestionModel AnyTerrorismFinancing { get; set; }

        /// <summary>
        /// Gets or Sets AnyCriminals
        /// </summary>
        [DataMember(Name="anyCriminals", EmitDefaultValue=false)]
        public YesNoQuestionModel AnyCriminals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KycQuestionsModel {\n");
            sb.Append("  EverTerminated: ").Append(EverTerminated).Append("\n");
            sb.Append("  AnyPoliticallyExposedPeople: ").Append(AnyPoliticallyExposedPeople).Append("\n");
            sb.Append("  BusinessArea: ").Append(BusinessArea).Append("\n");
            sb.Append("  CountriesOperateIn: ").Append(CountriesOperateIn).Append("\n");
            sb.Append("  AnyLawEnforcedSanctions: ").Append(AnyLawEnforcedSanctions).Append("\n");
            sb.Append("  AnyTerrorismFinancing: ").Append(AnyTerrorismFinancing).Append("\n");
            sb.Append("  AnyCriminals: ").Append(AnyCriminals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KycQuestionsModel);
        }

        /// <summary>
        /// Returns true if KycQuestionsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of KycQuestionsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycQuestionsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EverTerminated == input.EverTerminated ||
                    (this.EverTerminated != null &&
                    this.EverTerminated.Equals(input.EverTerminated))
                ) && 
                (
                    this.AnyPoliticallyExposedPeople == input.AnyPoliticallyExposedPeople ||
                    (this.AnyPoliticallyExposedPeople != null &&
                    this.AnyPoliticallyExposedPeople.Equals(input.AnyPoliticallyExposedPeople))
                ) && 
                (
                    this.BusinessArea == input.BusinessArea ||
                    (this.BusinessArea != null &&
                    this.BusinessArea.Equals(input.BusinessArea))
                ) && 
                (
                    this.CountriesOperateIn == input.CountriesOperateIn ||
                    (this.CountriesOperateIn != null &&
                    this.CountriesOperateIn.Equals(input.CountriesOperateIn))
                ) && 
                (
                    this.AnyLawEnforcedSanctions == input.AnyLawEnforcedSanctions ||
                    (this.AnyLawEnforcedSanctions != null &&
                    this.AnyLawEnforcedSanctions.Equals(input.AnyLawEnforcedSanctions))
                ) && 
                (
                    this.AnyTerrorismFinancing == input.AnyTerrorismFinancing ||
                    (this.AnyTerrorismFinancing != null &&
                    this.AnyTerrorismFinancing.Equals(input.AnyTerrorismFinancing))
                ) && 
                (
                    this.AnyCriminals == input.AnyCriminals ||
                    (this.AnyCriminals != null &&
                    this.AnyCriminals.Equals(input.AnyCriminals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EverTerminated != null)
                    hashCode = hashCode * 59 + this.EverTerminated.GetHashCode();
                if (this.AnyPoliticallyExposedPeople != null)
                    hashCode = hashCode * 59 + this.AnyPoliticallyExposedPeople.GetHashCode();
                if (this.BusinessArea != null)
                    hashCode = hashCode * 59 + this.BusinessArea.GetHashCode();
                if (this.CountriesOperateIn != null)
                    hashCode = hashCode * 59 + this.CountriesOperateIn.GetHashCode();
                if (this.AnyLawEnforcedSanctions != null)
                    hashCode = hashCode * 59 + this.AnyLawEnforcedSanctions.GetHashCode();
                if (this.AnyTerrorismFinancing != null)
                    hashCode = hashCode * 59 + this.AnyTerrorismFinancing.GetHashCode();
                if (this.AnyCriminals != null)
                    hashCode = hashCode * 59 + this.AnyCriminals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
