/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// AdvanceSignUpData
    /// </summary>
    [DataContract]
    public partial class AdvanceSignUpData :  IEquatable<AdvanceSignUpData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvanceSignUpData" /> class.
        /// </summary>
        /// <param name="currencyISOCode">currencyISOCode (default to &quot;DKK&quot;).</param>
        /// <param name="monthlyRevenue">monthlyRevenue.</param>
        /// <param name="monthlyRevenueSliderIndex">monthlyRevenueSliderIndex.</param>
        /// <param name="numberOfPaymentsPerMonth">numberOfPaymentsPerMonth.</param>
        /// <param name="numberOfPaymentsPerMonthSliderIndex">numberOfPaymentsPerMonthSliderIndex.</param>
        /// <param name="sweepPercentage">sweepPercentage.</param>
        /// <param name="timeOperating">timeOperating.</param>
        /// <param name="timeOperatingSliderIndex">timeOperatingSliderIndex.</param>
        /// <param name="sizeOfAdvance">sizeOfAdvance.</param>
        /// <param name="sizeOfAdvanceSliderIndex">sizeOfAdvanceSliderIndex.</param>
        /// <param name="howMuchToPayBack">howMuchToPayBack.</param>
        /// <param name="payBackInMonths">payBackInMonths.</param>
        public AdvanceSignUpData(string currencyISOCode = "DKK", double monthlyRevenue = default(double), int monthlyRevenueSliderIndex = default(int), int numberOfPaymentsPerMonth = default(int), int numberOfPaymentsPerMonthSliderIndex = default(int), double sweepPercentage = default(double), int timeOperating = default(int), int timeOperatingSliderIndex = default(int), double sizeOfAdvance = default(double), int sizeOfAdvanceSliderIndex = default(int), double howMuchToPayBack = default(double), double payBackInMonths = default(double))
        {
            // use default value if no "currencyISOCode" provided
            if (currencyISOCode == null)
            {
                this.CurrencyISOCode = "DKK";
            }
            else
            {
                this.CurrencyISOCode = currencyISOCode;
            }
            this.MonthlyRevenue = monthlyRevenue;
            this.MonthlyRevenueSliderIndex = monthlyRevenueSliderIndex;
            this.NumberOfPaymentsPerMonth = numberOfPaymentsPerMonth;
            this.NumberOfPaymentsPerMonthSliderIndex = numberOfPaymentsPerMonthSliderIndex;
            this.SweepPercentage = sweepPercentage;
            this.TimeOperating = timeOperating;
            this.TimeOperatingSliderIndex = timeOperatingSliderIndex;
            this.SizeOfAdvance = sizeOfAdvance;
            this.SizeOfAdvanceSliderIndex = sizeOfAdvanceSliderIndex;
            this.HowMuchToPayBack = howMuchToPayBack;
            this.PayBackInMonths = payBackInMonths;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyISOCode
        /// </summary>
        [DataMember(Name="currencyISOCode", EmitDefaultValue=false)]
        public string CurrencyISOCode { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyRevenue
        /// </summary>
        [DataMember(Name="monthlyRevenue", EmitDefaultValue=false)]
        public double MonthlyRevenue { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyRevenueSliderIndex
        /// </summary>
        [DataMember(Name="monthlyRevenueSliderIndex", EmitDefaultValue=false)]
        public int MonthlyRevenueSliderIndex { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPaymentsPerMonth
        /// </summary>
        [DataMember(Name="numberOfPaymentsPerMonth", EmitDefaultValue=false)]
        public int NumberOfPaymentsPerMonth { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPaymentsPerMonthSliderIndex
        /// </summary>
        [DataMember(Name="numberOfPaymentsPerMonthSliderIndex", EmitDefaultValue=false)]
        public int NumberOfPaymentsPerMonthSliderIndex { get; set; }

        /// <summary>
        /// Gets or Sets SweepPercentage
        /// </summary>
        [DataMember(Name="sweepPercentage", EmitDefaultValue=false)]
        public double SweepPercentage { get; set; }

        /// <summary>
        /// Gets or Sets TimeOperating
        /// </summary>
        [DataMember(Name="timeOperating", EmitDefaultValue=false)]
        public int TimeOperating { get; set; }

        /// <summary>
        /// Gets or Sets TimeOperatingSliderIndex
        /// </summary>
        [DataMember(Name="timeOperatingSliderIndex", EmitDefaultValue=false)]
        public int TimeOperatingSliderIndex { get; set; }

        /// <summary>
        /// Gets or Sets SizeOfAdvance
        /// </summary>
        [DataMember(Name="sizeOfAdvance", EmitDefaultValue=false)]
        public double SizeOfAdvance { get; set; }

        /// <summary>
        /// Gets or Sets SizeOfAdvanceSliderIndex
        /// </summary>
        [DataMember(Name="sizeOfAdvanceSliderIndex", EmitDefaultValue=false)]
        public int SizeOfAdvanceSliderIndex { get; set; }

        /// <summary>
        /// Gets or Sets HowMuchToPayBack
        /// </summary>
        [DataMember(Name="howMuchToPayBack", EmitDefaultValue=false)]
        public double HowMuchToPayBack { get; set; }

        /// <summary>
        /// Gets or Sets PayBackInMonths
        /// </summary>
        [DataMember(Name="payBackInMonths", EmitDefaultValue=false)]
        public double PayBackInMonths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvanceSignUpData {\n");
            sb.Append("  CurrencyISOCode: ").Append(CurrencyISOCode).Append("\n");
            sb.Append("  MonthlyRevenue: ").Append(MonthlyRevenue).Append("\n");
            sb.Append("  MonthlyRevenueSliderIndex: ").Append(MonthlyRevenueSliderIndex).Append("\n");
            sb.Append("  NumberOfPaymentsPerMonth: ").Append(NumberOfPaymentsPerMonth).Append("\n");
            sb.Append("  NumberOfPaymentsPerMonthSliderIndex: ").Append(NumberOfPaymentsPerMonthSliderIndex).Append("\n");
            sb.Append("  SweepPercentage: ").Append(SweepPercentage).Append("\n");
            sb.Append("  TimeOperating: ").Append(TimeOperating).Append("\n");
            sb.Append("  TimeOperatingSliderIndex: ").Append(TimeOperatingSliderIndex).Append("\n");
            sb.Append("  SizeOfAdvance: ").Append(SizeOfAdvance).Append("\n");
            sb.Append("  SizeOfAdvanceSliderIndex: ").Append(SizeOfAdvanceSliderIndex).Append("\n");
            sb.Append("  HowMuchToPayBack: ").Append(HowMuchToPayBack).Append("\n");
            sb.Append("  PayBackInMonths: ").Append(PayBackInMonths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvanceSignUpData);
        }

        /// <summary>
        /// Returns true if AdvanceSignUpData instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvanceSignUpData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvanceSignUpData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyISOCode == input.CurrencyISOCode ||
                    (this.CurrencyISOCode != null &&
                    this.CurrencyISOCode.Equals(input.CurrencyISOCode))
                ) && 
                (
                    this.MonthlyRevenue == input.MonthlyRevenue ||
                    this.MonthlyRevenue.Equals(input.MonthlyRevenue)
                ) && 
                (
                    this.MonthlyRevenueSliderIndex == input.MonthlyRevenueSliderIndex ||
                    this.MonthlyRevenueSliderIndex.Equals(input.MonthlyRevenueSliderIndex)
                ) && 
                (
                    this.NumberOfPaymentsPerMonth == input.NumberOfPaymentsPerMonth ||
                    this.NumberOfPaymentsPerMonth.Equals(input.NumberOfPaymentsPerMonth)
                ) && 
                (
                    this.NumberOfPaymentsPerMonthSliderIndex == input.NumberOfPaymentsPerMonthSliderIndex ||
                    this.NumberOfPaymentsPerMonthSliderIndex.Equals(input.NumberOfPaymentsPerMonthSliderIndex)
                ) && 
                (
                    this.SweepPercentage == input.SweepPercentage ||
                    this.SweepPercentage.Equals(input.SweepPercentage)
                ) && 
                (
                    this.TimeOperating == input.TimeOperating ||
                    this.TimeOperating.Equals(input.TimeOperating)
                ) && 
                (
                    this.TimeOperatingSliderIndex == input.TimeOperatingSliderIndex ||
                    this.TimeOperatingSliderIndex.Equals(input.TimeOperatingSliderIndex)
                ) && 
                (
                    this.SizeOfAdvance == input.SizeOfAdvance ||
                    this.SizeOfAdvance.Equals(input.SizeOfAdvance)
                ) && 
                (
                    this.SizeOfAdvanceSliderIndex == input.SizeOfAdvanceSliderIndex ||
                    this.SizeOfAdvanceSliderIndex.Equals(input.SizeOfAdvanceSliderIndex)
                ) && 
                (
                    this.HowMuchToPayBack == input.HowMuchToPayBack ||
                    this.HowMuchToPayBack.Equals(input.HowMuchToPayBack)
                ) && 
                (
                    this.PayBackInMonths == input.PayBackInMonths ||
                    this.PayBackInMonths.Equals(input.PayBackInMonths)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.CurrencyISOCode.GetHashCode();
                hashCode = hashCode * 59 + this.MonthlyRevenue.GetHashCode();
                hashCode = hashCode * 59 + this.MonthlyRevenueSliderIndex.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfPaymentsPerMonth.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfPaymentsPerMonthSliderIndex.GetHashCode();
                hashCode = hashCode * 59 + this.SweepPercentage.GetHashCode();
                hashCode = hashCode * 59 + this.TimeOperating.GetHashCode();
                hashCode = hashCode * 59 + this.TimeOperatingSliderIndex.GetHashCode();
                hashCode = hashCode * 59 + this.SizeOfAdvance.GetHashCode();
                hashCode = hashCode * 59 + this.SizeOfAdvanceSliderIndex.GetHashCode();
                hashCode = hashCode * 59 + this.HowMuchToPayBack.GetHashCode();
                hashCode = hashCode * 59 + this.PayBackInMonths.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
