/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// A model representing the loan offer made to the lead
    /// </summary>
    [DataContract]
    public partial class OnboardingOfferModel :  IEquatable<OnboardingOfferModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardingOfferModel" /> class.
        /// </summary>
        /// <param name="youWillGet">Gets or sets the funding amount for the loan.</param>
        /// <param name="youWillRepay">Gets or sets the repayable amount (loan amount) for the loan.</param>
        /// <param name="currencyISOCode">Gets or sets the currency ISO code for the loan.</param>
        /// <param name="sweep">Gets or sets the sweep for the loan, which is the percentage of the settlement allocated towards repaying the loan.</param>
        public OnboardingOfferModel(double youWillGet = default(double), double youWillRepay = default(double), string currencyISOCode = default(string), double sweep = default(double))
        {
            this.YouWillGet = youWillGet;
            this.YouWillRepay = youWillRepay;
            this.CurrencyISOCode = currencyISOCode;
            this.Sweep = sweep;
        }
        
        /// <summary>
        /// Gets or sets the funding amount for the loan
        /// </summary>
        /// <value>Gets or sets the funding amount for the loan</value>
        [DataMember(Name="youWillGet", EmitDefaultValue=false)]
        public double YouWillGet { get; set; }

        /// <summary>
        /// Gets or sets the repayable amount (loan amount) for the loan
        /// </summary>
        /// <value>Gets or sets the repayable amount (loan amount) for the loan</value>
        [DataMember(Name="youWillRepay", EmitDefaultValue=false)]
        public double YouWillRepay { get; set; }

        /// <summary>
        /// Gets or sets the currency ISO code for the loan
        /// </summary>
        /// <value>Gets or sets the currency ISO code for the loan</value>
        [DataMember(Name="currencyISOCode", EmitDefaultValue=false)]
        public string CurrencyISOCode { get; set; }

        /// <summary>
        /// Gets or sets the sweep for the loan, which is the percentage of the settlement allocated towards repaying the loan
        /// </summary>
        /// <value>Gets or sets the sweep for the loan, which is the percentage of the settlement allocated towards repaying the loan</value>
        [DataMember(Name="sweep", EmitDefaultValue=false)]
        public double Sweep { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnboardingOfferModel {\n");
            sb.Append("  YouWillGet: ").Append(YouWillGet).Append("\n");
            sb.Append("  YouWillRepay: ").Append(YouWillRepay).Append("\n");
            sb.Append("  CurrencyISOCode: ").Append(CurrencyISOCode).Append("\n");
            sb.Append("  Sweep: ").Append(Sweep).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnboardingOfferModel);
        }

        /// <summary>
        /// Returns true if OnboardingOfferModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OnboardingOfferModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnboardingOfferModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.YouWillGet == input.YouWillGet ||
                    this.YouWillGet.Equals(input.YouWillGet)
                ) && 
                (
                    this.YouWillRepay == input.YouWillRepay ||
                    this.YouWillRepay.Equals(input.YouWillRepay)
                ) && 
                (
                    this.CurrencyISOCode == input.CurrencyISOCode ||
                    (this.CurrencyISOCode != null &&
                    this.CurrencyISOCode.Equals(input.CurrencyISOCode))
                ) && 
                (
                    this.Sweep == input.Sweep ||
                    this.Sweep.Equals(input.Sweep)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.YouWillGet.GetHashCode();
                hashCode = hashCode * 59 + this.YouWillRepay.GetHashCode();
                if (this.CurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.CurrencyISOCode.GetHashCode();
                hashCode = hashCode * 59 + this.Sweep.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // YouWillGet (double) minimum
            if(this.YouWillGet < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for YouWillGet, must be a value greater than or equal to 0.", new [] { "YouWillGet" });
            }

            // YouWillRepay (double) minimum
            if(this.YouWillRepay < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for YouWillRepay, must be a value greater than or equal to 0.", new [] { "YouWillRepay" });
            }

            // Sweep (double) maximum
            if(this.Sweep > (double)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sweep, must be a value less than or equal to 100.", new [] { "Sweep" });
            }

            // Sweep (double) minimum
            if(this.Sweep < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sweep, must be a value greater than or equal to 0.", new [] { "Sweep" });
            }

            yield break;
        }
    }

}
