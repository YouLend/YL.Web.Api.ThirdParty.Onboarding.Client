/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// The parameters for the credit rating band of a lead
    /// </summary>
    [DataContract]
    public partial class CreditRatingBandParameters :  IEquatable<CreditRatingBandParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditRatingBandParameters" /> class.
        /// </summary>
        /// <param name="rating">Gets or sets the credit rating of the lead.</param>
        /// <param name="lowerLimit">Gets or sets the lower limit for credit score for the credit rating band.</param>
        /// <param name="upperLimit">Gets or sets the upper limit for credit score for the credit rating band.</param>
        /// <param name="targetTerm">Gets or sets the target number of months until full repayment of the loan, which is used to determine the sweep of the option 1 loan.</param>
        /// <param name="fee">Gets or sets the fee (as a factor), which is used to determine the LoanAmount (repayable amount) from the FundingAmount (amount lent to the borrower).</param>
        /// <param name="size">Gets or sets the size for the credit rating band, which is used to determine the FundingAmount of the option 1 loan.</param>
        /// <param name="countryCode">Gets or sets the country code for which this credit rating band applies.</param>
        /// <param name="loanSweep2">Gets or sets the fixed sweep used in loan option 2.</param>
        /// <param name="loanSweep3">Gets or sets the fixed sweep used in loan option 3.</param>
        public CreditRatingBandParameters(string rating = default(string), double lowerLimit = default(double), double upperLimit = default(double), double targetTerm = default(double), double fee = default(double), double size = default(double), string countryCode = default(string), double loanSweep2 = default(double), double loanSweep3 = default(double))
        {
            this.Rating = rating;
            this.LowerLimit = lowerLimit;
            this.UpperLimit = upperLimit;
            this.TargetTerm = targetTerm;
            this.Fee = fee;
            this.Size = size;
            this.CountryCode = countryCode;
            this.LoanSweep2 = loanSweep2;
            this.LoanSweep3 = loanSweep3;
        }
        
        /// <summary>
        /// Gets or sets the credit rating of the lead
        /// </summary>
        /// <value>Gets or sets the credit rating of the lead</value>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public string Rating { get; set; }

        /// <summary>
        /// Gets or sets the lower limit for credit score for the credit rating band
        /// </summary>
        /// <value>Gets or sets the lower limit for credit score for the credit rating band</value>
        [DataMember(Name="lowerLimit", EmitDefaultValue=false)]
        public double LowerLimit { get; set; }

        /// <summary>
        /// Gets or sets the upper limit for credit score for the credit rating band
        /// </summary>
        /// <value>Gets or sets the upper limit for credit score for the credit rating band</value>
        [DataMember(Name="upperLimit", EmitDefaultValue=false)]
        public double UpperLimit { get; set; }

        /// <summary>
        /// Gets or sets the target number of months until full repayment of the loan, which is used to determine the sweep of the option 1 loan
        /// </summary>
        /// <value>Gets or sets the target number of months until full repayment of the loan, which is used to determine the sweep of the option 1 loan</value>
        [DataMember(Name="targetTerm", EmitDefaultValue=false)]
        public double TargetTerm { get; set; }

        /// <summary>
        /// Gets or sets the fee (as a factor), which is used to determine the LoanAmount (repayable amount) from the FundingAmount (amount lent to the borrower)
        /// </summary>
        /// <value>Gets or sets the fee (as a factor), which is used to determine the LoanAmount (repayable amount) from the FundingAmount (amount lent to the borrower)</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public double Fee { get; set; }

        /// <summary>
        /// Gets or sets the size for the credit rating band, which is used to determine the FundingAmount of the option 1 loan
        /// </summary>
        /// <value>Gets or sets the size for the credit rating band, which is used to determine the FundingAmount of the option 1 loan</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public double Size { get; set; }

        /// <summary>
        /// Gets or sets the country code for which this credit rating band applies
        /// </summary>
        /// <value>Gets or sets the country code for which this credit rating band applies</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or sets the fixed sweep used in loan option 2
        /// </summary>
        /// <value>Gets or sets the fixed sweep used in loan option 2</value>
        [DataMember(Name="loanSweep2", EmitDefaultValue=false)]
        public double LoanSweep2 { get; set; }

        /// <summary>
        /// Gets or sets the fixed sweep used in loan option 3
        /// </summary>
        /// <value>Gets or sets the fixed sweep used in loan option 3</value>
        [DataMember(Name="loanSweep3", EmitDefaultValue=false)]
        public double LoanSweep3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditRatingBandParameters {\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  LowerLimit: ").Append(LowerLimit).Append("\n");
            sb.Append("  UpperLimit: ").Append(UpperLimit).Append("\n");
            sb.Append("  TargetTerm: ").Append(TargetTerm).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  LoanSweep2: ").Append(LoanSweep2).Append("\n");
            sb.Append("  LoanSweep3: ").Append(LoanSweep3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditRatingBandParameters);
        }

        /// <summary>
        /// Returns true if CreditRatingBandParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditRatingBandParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditRatingBandParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.LowerLimit == input.LowerLimit ||
                    this.LowerLimit.Equals(input.LowerLimit)
                ) && 
                (
                    this.UpperLimit == input.UpperLimit ||
                    this.UpperLimit.Equals(input.UpperLimit)
                ) && 
                (
                    this.TargetTerm == input.TargetTerm ||
                    this.TargetTerm.Equals(input.TargetTerm)
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.LoanSweep2 == input.LoanSweep2 ||
                    this.LoanSweep2.Equals(input.LoanSweep2)
                ) && 
                (
                    this.LoanSweep3 == input.LoanSweep3 ||
                    this.LoanSweep3.Equals(input.LoanSweep3)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                hashCode = hashCode * 59 + this.LowerLimit.GetHashCode();
                hashCode = hashCode * 59 + this.UpperLimit.GetHashCode();
                hashCode = hashCode * 59 + this.TargetTerm.GetHashCode();
                hashCode = hashCode * 59 + this.Fee.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                hashCode = hashCode * 59 + this.LoanSweep2.GetHashCode();
                hashCode = hashCode * 59 + this.LoanSweep3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
