/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// A model containing data about payment data for a lead
    /// </summary>
    [DataContract]
    public partial class PaymentDataStepView :  IEquatable<PaymentDataStepView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDataStepView" /> class.
        /// </summary>
        /// <param name="leadId">Gets or sets the lead id.</param>
        /// <param name="paymentDataDocuments">Gets or sets the dictionary of documents uploaded.</param>
        /// <param name="gatewaysUsed">Gets or sets a list of payment gateways used.</param>
        /// <param name="calculatorData">calculatorData.</param>
        /// <param name="country">Gets or sets the country.</param>
        public PaymentDataStepView(Guid leadId = default(Guid), Dictionary<string, Document> paymentDataDocuments = default(Dictionary<string, Document>), List<string> gatewaysUsed = default(List<string>), AdvanceSignUpData calculatorData = default(AdvanceSignUpData), string country = default(string))
        {
            this.LeadId = leadId;
            this.PaymentDataDocuments = paymentDataDocuments;
            this.GatewaysUsed = gatewaysUsed;
            this.CalculatorData = calculatorData;
            this.Country = country;
        }
        
        /// <summary>
        /// Gets or sets the lead id
        /// </summary>
        /// <value>Gets or sets the lead id</value>
        [DataMember(Name="leadId", EmitDefaultValue=false)]
        public Guid LeadId { get; set; }

        /// <summary>
        /// Gets or sets the dictionary of documents uploaded
        /// </summary>
        /// <value>Gets or sets the dictionary of documents uploaded</value>
        [DataMember(Name="paymentDataDocuments", EmitDefaultValue=false)]
        public Dictionary<string, Document> PaymentDataDocuments { get; set; }

        /// <summary>
        /// Gets or sets a list of payment gateways used
        /// </summary>
        /// <value>Gets or sets a list of payment gateways used</value>
        [DataMember(Name="gatewaysUsed", EmitDefaultValue=false)]
        public List<string> GatewaysUsed { get; set; }

        /// <summary>
        /// Gets or Sets CalculatorData
        /// </summary>
        [DataMember(Name="calculatorData", EmitDefaultValue=false)]
        public AdvanceSignUpData CalculatorData { get; set; }

        /// <summary>
        /// Gets or sets the country
        /// </summary>
        /// <value>Gets or sets the country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentDataStepView {\n");
            sb.Append("  LeadId: ").Append(LeadId).Append("\n");
            sb.Append("  PaymentDataDocuments: ").Append(PaymentDataDocuments).Append("\n");
            sb.Append("  GatewaysUsed: ").Append(GatewaysUsed).Append("\n");
            sb.Append("  CalculatorData: ").Append(CalculatorData).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDataStepView);
        }

        /// <summary>
        /// Returns true if PaymentDataStepView instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDataStepView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDataStepView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeadId == input.LeadId ||
                    (this.LeadId != null &&
                    this.LeadId.Equals(input.LeadId))
                ) && 
                (
                    this.PaymentDataDocuments == input.PaymentDataDocuments ||
                    this.PaymentDataDocuments != null &&
                    input.PaymentDataDocuments != null &&
                    this.PaymentDataDocuments.SequenceEqual(input.PaymentDataDocuments)
                ) && 
                (
                    this.GatewaysUsed == input.GatewaysUsed ||
                    this.GatewaysUsed != null &&
                    input.GatewaysUsed != null &&
                    this.GatewaysUsed.SequenceEqual(input.GatewaysUsed)
                ) && 
                (
                    this.CalculatorData == input.CalculatorData ||
                    (this.CalculatorData != null &&
                    this.CalculatorData.Equals(input.CalculatorData))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeadId != null)
                    hashCode = hashCode * 59 + this.LeadId.GetHashCode();
                if (this.PaymentDataDocuments != null)
                    hashCode = hashCode * 59 + this.PaymentDataDocuments.GetHashCode();
                if (this.GatewaysUsed != null)
                    hashCode = hashCode * 59 + this.GatewaysUsed.GetHashCode();
                if (this.CalculatorData != null)
                    hashCode = hashCode * 59 + this.CalculatorData.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
