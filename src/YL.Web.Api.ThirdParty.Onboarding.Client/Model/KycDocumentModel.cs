/* 
 * YouLend Third Party Onboarding API
 *
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Onboarding.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Onboarding.Client.Model
{
    /// <summary>
    /// Model containing details about a KYC document
    /// </summary>
    [DataContract]
    public partial class KycDocumentModel :  IEquatable<KycDocumentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KycDocumentModel" /> class.
        /// </summary>
        /// <param name="documentId">Gets or sets the document id.</param>
        /// <param name="documentName">Gets or sets the document name.</param>
        /// <param name="documentType">Gets or sets the document type (e.g. pdf, csv).</param>
        /// <param name="kycDocumentType">Gets or sets the KYC document type (e.g. passport, proof of address).</param>
        /// <param name="dateUploaded">Gets or sets the upload date of the KYC document.</param>
        public KycDocumentModel(Guid documentId = default(Guid), string documentName = default(string), string documentType = default(string), string kycDocumentType = default(string), DateTime dateUploaded = default(DateTime))
        {
            this.DocumentId = documentId;
            this.DocumentName = documentName;
            this.DocumentType = documentType;
            this.KycDocumentType = kycDocumentType;
            this.DateUploaded = dateUploaded;
        }
        
        /// <summary>
        /// Gets or sets the document id
        /// </summary>
        /// <value>Gets or sets the document id</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public Guid DocumentId { get; set; }

        /// <summary>
        /// Gets or sets the document name
        /// </summary>
        /// <value>Gets or sets the document name</value>
        [DataMember(Name="documentName", EmitDefaultValue=false)]
        public string DocumentName { get; set; }

        /// <summary>
        /// Gets or sets the document type (e.g. pdf, csv)
        /// </summary>
        /// <value>Gets or sets the document type (e.g. pdf, csv)</value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or sets the KYC document type (e.g. passport, proof of address)
        /// </summary>
        /// <value>Gets or sets the KYC document type (e.g. passport, proof of address)</value>
        [DataMember(Name="kycDocumentType", EmitDefaultValue=false)]
        public string KycDocumentType { get; set; }

        /// <summary>
        /// Gets or sets the upload date of the KYC document
        /// </summary>
        /// <value>Gets or sets the upload date of the KYC document</value>
        [DataMember(Name="dateUploaded", EmitDefaultValue=false)]
        public DateTime DateUploaded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KycDocumentModel {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentName: ").Append(DocumentName).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  KycDocumentType: ").Append(KycDocumentType).Append("\n");
            sb.Append("  DateUploaded: ").Append(DateUploaded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KycDocumentModel);
        }

        /// <summary>
        /// Returns true if KycDocumentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of KycDocumentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycDocumentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DocumentName == input.DocumentName ||
                    (this.DocumentName != null &&
                    this.DocumentName.Equals(input.DocumentName))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.KycDocumentType == input.KycDocumentType ||
                    (this.KycDocumentType != null &&
                    this.KycDocumentType.Equals(input.KycDocumentType))
                ) && 
                (
                    this.DateUploaded == input.DateUploaded ||
                    (this.DateUploaded != null &&
                    this.DateUploaded.Equals(input.DateUploaded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentName != null)
                    hashCode = hashCode * 59 + this.DocumentName.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.KycDocumentType != null)
                    hashCode = hashCode * 59 + this.KycDocumentType.GetHashCode();
                if (this.DateUploaded != null)
                    hashCode = hashCode * 59 + this.DateUploaded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
